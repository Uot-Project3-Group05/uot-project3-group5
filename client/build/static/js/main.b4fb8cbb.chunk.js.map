{"version":3,"sources":["logo.svg","assets/images/logoMD.png","ColorModeSwitcher.js","Logo.js","utils/mutations.js","utils/auth.js","components/Signup/index.js","components/Login/index.js","components/Nav/index.js","components/Profile/index.js","utils/queries.js","components/Home/index.js","utils/gameLogic.js","components/Game/index.js","App.js","serviceWorker.js","index.js","assets/images/periodic-table.svg"],"names":["module","exports","__webpack_require__","p","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","react_default","a","createElement","icon_button","Object","assign","size","fontSize","aria-label","concat","variant","color","marginLeft","onClick","icon","keyframes","_templateObject","taggedTemplateLiteral","LOGIN","gql","mutations_templateObject","ADD_USER","_templateObject2","auth","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","removeItem","SignupForm","_useState","useState","username","email","password","_useState2","slicedToArray","userFormData","setUserFormData","_useState3","validated","_useMutation","useMutation","_useMutation2","addUser","error","handleInputChange","event","_event$target","target","name","value","objectSpread","defineProperty","handleFormSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","_yield$addUser","data","wrap","_context","prev","next","preventDefault","currentTarget","checkValidity","stopPropagation","variables","sent","Auth","login","t0","console","stop","_x","apply","arguments","Fragment","noValidate","onSubmit","form_control","id","onChange","isRequired","mt","form_label","input","type","placeholder","form_error","htmlFor","esm_button","LoginForm","loginUser","_yield$loginUser","Nav","navLinkSelected","setNavLinkSelected","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","flex","box","link_box","react_router_dom","to","esm_image","src","logo","alt","w","h","spacer","d","alignItems","mr","loggedIn","logout","avatar","modal","tabs","Login","Signup","Profile","deck","cards","img","textAlign","mb","simple_grid","minChildWidth","spacing","ml","direction","justify","align","center","boxShadow","bg","borderRadius","maxW","overflow","periodicTable","progress","colorScheme","hasStripe","gi_index_esm","GET_DECK_ID","queries_templateObject","queries_templateObject2","_templateObject3","_templateObject4","GET_DECKS","_templateObject5","Home","_useQuery","useQuery","loading","log","decks","map","_id","key","deckname","length","GameSession","matrix","classCallCheck","finished","cardsInSet","problemSet","correctCards","incorrectCards","currentQuestion","result","array","sort","b","Math","random","strongCards","total","i","strong","index","_this","num","slice","forEach","card","push","cardId","score","getTotal","addNewCards","bin","_this2","check","floor","randomSelect","newCard","find","indexOf","shuffleArray","j","filter","choices","results","splice","optionCard","getCardData","back","problem","question","options","answer","front","generateOptions","hasCards","addCardsByScore","selectCards","createProblemSet","tallyResults","bool","shift","resortMatrix","arr","_this3","cardIndex","Game","setQuestion","_useState4","setOptions","_useState5","_useState6","methods","setMethods","toast","useToast","useParams","leftIcon","md_index_esm","_hover","title","description","status","duration","isClosable","position","m","start","renderNext","handleInput","e","userInput","textContent","alert","replace","handleStart","option","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","index_esm","chakra_provider","theme","ColorModeSwitcher_ColorModeSwitcher","justifySelf","components_Nav","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","react","esm","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b4fb8cbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c1e81673.svg\";","module.exports = __webpack_public_path__ + \"static/media/logoMD.ae4a0349.png\";","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\nimport { Image, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';\nimport logo from './logo.svg';\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nexport const Logo = props => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 20s linear`;\n\n  return <Image animation={animation} src={logo} {...props} />;\n};\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation loginUser($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token \r\n      user {\r\n        _id\r\n        username\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import decode from 'jwt-decode';\r\n\r\n// a new class will be created everytime it is imported\r\n// by any component\r\n\r\nclass AuthService {\r\n    // retrieve data saved in token\r\n    getProfile() {\r\n      return decode(this.getToken());\r\n    }\r\n  \r\n    // check if the user is still logged in\r\n    loggedIn() {\r\n      // Checks if there is a saved token and it's still valid\r\n      const token = this.getToken();\r\n      // use type coersion to check if token is NOT undefined and the token is NOT expired\r\n      return !!token && !this.isTokenExpired(token);\r\n    }\r\n  \r\n    // check if the token has expired\r\n    isTokenExpired(token) {\r\n      try {\r\n        const decoded = decode(token);\r\n        if (decoded.exp < Date.now() / 1000) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } catch (err) {\r\n        return false;\r\n      }\r\n    }\r\n  \r\n    // retrieve token from localStorage\r\n    getToken() {\r\n      // Retrieves the user token from localStorage\r\n      return localStorage.getItem('id_token');\r\n    }\r\n  \r\n    // set token to localStorage and reload page to homepage\r\n    login(idToken) {\r\n      // Saves user token to localStorage\r\n      localStorage.setItem('id_token', idToken);\r\n  \r\n      window.location.assign('/');\r\n    }\r\n  \r\n    // clear token from localStorage and force logout with reload\r\n    logout() {\r\n      // Clear user token and profile data from localStorage\r\n      localStorage.removeItem('id_token');\r\n      // this will reload the page and reset the state of the application\r\n      window.location.assign('/');\r\n    }\r\n  }\r\n\r\nexport default new AuthService();","import React, { useState } from 'react';\r\nimport { Form, Button, Alert, FormControl, FormLabel, FormErrorMessage, FormHelperText, Input } from '@chakra-ui/react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\n//import { createUser } from '../utils/API';\r\nimport { ADD_USER } from '../../utils/mutations'\r\nimport Auth from '../../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState('false');\r\n  // set state for alert\r\n  //const [showAlert, setShowAlert] = useState('false');\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });    \r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    \r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;    \r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData }\r\n      });\r\n      \r\n\r\n    //  const { token, user } = await response.json();\r\n    //  console.log(user);\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      //setShowAlert('true');\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  // Disable button logic test\r\n  //disabled={!(userFormData.username && userFormData.email && userFormData.password)\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above*/}\r\n      <form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        {/* <Alert onClose={() => setShowAlert('false')} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert> */}\r\n\r\n        <FormControl                    \r\n          id='username'\r\n          name='username'\r\n          onChange={handleInputChange}\r\n          value={userFormData.username}\r\n          isRequired\r\n          mt={2}\r\n        >\r\n          <FormLabel name='username'>Username</FormLabel>\r\n          <Input name='username' type='text' placeholder='Your username' />\r\n          <FormErrorMessage>Username is required!</FormErrorMessage>\r\n        </FormControl>\r\n\r\n        <FormControl\r\n          id='email'          \r\n          name='email'\r\n          onChange={handleInputChange}\r\n          value={userFormData.email}\r\n          isRequired\r\n          mt={2}\r\n        >\r\n          <FormLabel htmlFor='email'>Email</FormLabel>\r\n          <Input name='email' type='email' placeholder='Your email address' />\r\n          \r\n          <FormErrorMessage>Email is required!</FormErrorMessage>\r\n        </FormControl>\r\n\r\n        <FormControl\r\n          type='password'\r\n          placeholder='Your password'\r\n          name='password'\r\n          onChange={handleInputChange}\r\n          value={userFormData.password}\r\n          isRequired\r\n          mt={2}\r\n        >\r\n          <FormLabel htmlFor='password'>Password</FormLabel>\r\n          <Input name='password' type='password' placeholder='Your Password' />\r\n          <FormErrorMessage>Password is required!</FormErrorMessage>\r\n        </FormControl>\r\n        <Button\r\n          type='submit'\r\n          mt={2}\r\n          >\r\n          Submit\r\n        </Button>\r\n      </form>\r\n      {error && <div>Sing Up Failed</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;","import React, { useState } from 'react';\r\nimport { Form, \r\n  Button, \r\n  Alert, \r\n  FormControl, \r\n  FormLabel, \r\n  FormErrorMessage, \r\n  FormHelperText, \r\n  Input,\r\n} from '@chakra-ui/react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\n//import { createUser } from '../utils/API';\r\nimport { LOGIN } from '../../utils/mutations'\r\nimport Auth from '../../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState('false');\r\n  // set state for alert\r\n  //const [showAlert, setShowAlert] = useState('false');\r\n\r\n  const [loginUser, { error }] = useMutation(LOGIN);\r\n  \r\n  \r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });    \r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    \r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;    \r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await loginUser({\r\n        variables: { ...userFormData }\r\n      });\r\n      \r\n\r\n    //  const { token, user } = await response.json();\r\n    //  console.log(user);\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      //setShowAlert('true');\r\n    }\r\n\r\n    setUserFormData({      \r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  // Disable button logic test\r\n  //disabled={!(userFormData.email && userFormData.password)}\r\n  \r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above*/}\r\n      <form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        {/* <Alert onClose={() => setShowAlert('false')} show={showAlert} variant='danger'>\r\n          Something went wrong with your login!\r\n        </Alert> */}\r\n   \r\n\r\n        <FormControl\r\n          id='email'          \r\n          name='email'\r\n          onChange={handleInputChange}\r\n          value={userFormData.email}\r\n          isRequired\r\n          mt={2}\r\n        >\r\n          <FormLabel htmlFor='email'>Email</FormLabel>\r\n          <Input name='email' type='email' placeholder='Your email address' />\r\n          \r\n          <FormErrorMessage>Email is required!</FormErrorMessage>\r\n        </FormControl>\r\n\r\n        <FormControl\r\n          type='password'\r\n          placeholder='Your password'\r\n          name='password'\r\n          onChange={handleInputChange}\r\n          value={userFormData.password}\r\n          isRequired\r\n          mt={2}          \r\n        >\r\n          <FormLabel htmlFor='password'>Password</FormLabel>\r\n          <Input name='password' type='password' placeholder='Your Password' />\r\n          <FormErrorMessage>Password is required!</FormErrorMessage>\r\n        </FormControl>\r\n        <Button\r\n          type='submit'\r\n          mt={2}\r\n          >\r\n          Submit\r\n        </Button>\r\n      </form>\r\n      {error && <div>Login failed</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Spacer,\r\n  Avatar,\r\n  LinkBox,\r\n  LinkOverlay,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Tabs, \r\n  TabList, \r\n  TabPanels, \r\n  Tab, \r\n  TabPanel,\r\n  Button,\r\n  useDisclosure,\r\n  Image\r\n\r\n} from '@chakra-ui/react';\r\n\r\nimport logo from '../../assets/images/logoMD.png'\r\n\r\n\r\nimport { CopyIcon } from '@chakra-ui/icons';\r\n\r\nimport SignupForm from '../Signup';\r\nimport LoginForm from '../Login';\r\nimport Auth from '../../utils/auth';\r\n\r\n\r\n\r\nfunction Nav(props) {\r\n\r\n  const {\r\n    navLinkSelected,\r\n    setNavLinkSelected\r\n   \r\n  } = props;\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n//  href=\"#Home\" \r\n//  onClick={() => setNavLinkSelected('Home')}\r\n//LinkOverlay \r\n// href=\"#Profile\" \r\n// onClick={() => setNavLinkSelected('Profile')}\r\n\r\n  // logout function \r\n  const logout = event => {\r\n    // this will stop the a element from refreshing the page\r\n    event.preventDefault();\r\n    Auth.logout();\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <Flex>    \r\n      <Box p=\"4\" >\r\n        <LinkBox>\r\n        <Link \r\n          to={`/`}\r\n          > \r\n          <Image src={logo} alt='placeholder' \r\n          w={20} h={20} \r\n          />\r\n        \r\n        </Link>\r\n        </LinkBox>        \r\n      </Box>\r\n      <Spacer />\r\n      <Box p=\"4\" d='flex' alignItems='center'>\r\n        <Box mr={3}>\r\n        {Auth.loggedIn() ? (\r\n            <>\r\n              <Button onClick={logout}>LogOut</Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button onClick={onOpen}>Login/Signup</Button>\r\n            </>\r\n          )}\r\n          \r\n        </Box>\r\n        {/*<Avatar name=\"Dan Abrahmov\" src=\"https://bit.ly/dan-abramov\" />*/}\r\n        <LinkBox>\r\n        <Link \r\n          to={`/profile`}\r\n        >\r\n        <Avatar size=\"xl\" ></Avatar>\r\n        </Link>\r\n        </LinkBox>\r\n\r\n      </Box>\r\n    </Flex>\r\n    <Modal isOpen={isOpen} onClose={onClose} size={'lg'}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalCloseButton />\r\n        <Tabs variant='enclosed'>\r\n          <TabList>\r\n            <Tab>Login</Tab>\r\n            <Tab>Signup</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              {/* <ModalContent> */}                \r\n                <ModalBody>\r\n                  <LoginForm />\r\n                </ModalBody>          \r\n              {/* </ModalContent> */}\r\n            </TabPanel>\r\n            <TabPanel>\r\n              {/* <ModalContent> */}                              \r\n                <ModalBody>\r\n                  <SignupForm />\r\n                </ModalBody>          \r\n              {/* </ModalContent> */}\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </ModalContent>        \r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Spacer,\r\n  Avatar,\r\n  Wrap,\r\n  WrapItem,\r\n  Center,\r\n  SimpleGrid,\r\n  Image,\r\n  Progress,\r\n  CircularProgress,\r\n  CircularProgressLabel\r\n} from '@chakra-ui/react';\r\n\r\nimport { \r\n  GiEmerald,\r\n  GiGoldBar\r\n } from \"react-icons/gi\";\r\n \r\n import periodicTable from '../../assets/images/periodic-table.svg'\r\n\r\n\r\nfunction Profile() {\r\n\r\n  const deck = [\r\n    \r\n    {\r\n    name: 'Periodic Table of Elements',\r\n    cards: 118,\r\n    img: 'https://bit.ly/2Z4KKcF'\r\n    },\r\n    {\r\n      name: 'Flags of the world',\r\n      cards: 195,\r\n      img: 'https://bit.ly/2Z4KKcF'\r\n      },\r\n\r\n  ]\r\n\r\n  //<GiEmerald w={20} h={20} color=\"blue.200\" ></GiEmerald>\r\n  //GiEmerald\r\n\r\n  return (\r\n    <Box>\r\n\r\n    <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n      Pick a Deck to Continue or Begin!\r\n    </Box>     \r\n\r\n    <SimpleGrid minChildWidth=\"300px\" spacing={10} ml={5} mr={5}>\r\n\r\n      <Box >\r\n       <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n          In Progress\r\n        </Box>     \r\n      <Wrap  direction=\"column\"  justify=\"space-evenly\" align=\"center\">\r\n          <Link to={`/game/12345`}>\r\n            <WrapItem  align=\"center\">\r\n              <Center boxShadow=\"2xl\" bg=\"red.200\" borderRadius=\"lg\">\r\n                <Box maxW=\"sm\" \r\n                borderRadius=\"lg\" \r\n                overflow=\"hidden\">\r\n                  <Image src={periodicTable} alt='Periodic Table' />\r\n                  <Box>\r\n                    {deck[0].name}\r\n                  </Box>\r\n                  <Box>\r\n                    {deck[0].cards} cards\r\n                  </Box>\r\n                  <Box ml={3} mr={3} >\r\n                    <Progress \r\n                    colorScheme = \"purple\"\r\n                    mb={2}\r\n                    borderRadius=\"lg\"\r\n                    value={33}\r\n                    hasStripe=\"true\"\r\n                    size=\"md\" />\r\n                  </Box>\r\n                  <Box align=\"center\" mb={3}>\r\n                  <GiEmerald w={20} h={20} color=\"#cd7f32\"  size={50}></GiEmerald>\r\n                  </Box>\r\n                  \r\n                </Box>\r\n              </Center>\r\n            </WrapItem>\r\n          </Link>\r\n      </Wrap>\r\n      </Box>\r\n\r\n      <Box >\r\n        <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n            Completed\r\n        </Box>   \r\n        <Wrap  direction=\"column\"  align=\"center\">\r\n          <Link to={`/game/12345`}>\r\n            <WrapItem >\r\n            <Center boxShadow=\"2xl\" bg=\"red.200\" borderRadius=\"lg\">\r\n                <Box maxW=\"sm\" \r\n                \r\n                borderRadius=\"lg\" \r\n                overflow=\"hidden\">\r\n                  <Image src={deck[1].img} alt='placeholder' />\r\n                  <Box>\r\n                    {deck[1].name}\r\n                  </Box>\r\n                  <Box>\r\n                    {deck[1].cards} cards\r\n                  </Box>\r\n                  <Box ml={3} mr={3} >\r\n                    <Progress \r\n                    colorScheme = \"purple\"\r\n                    mb={2}\r\n                    borderRadius=\"lg\"\r\n                    value={100}\r\n                    hasStripe=\"true\"\r\n                    size=\"md\" />\r\n                  </Box>\r\n                  <Box align=\"center\" mb={3}>\r\n                  <GiGoldBar w={20} h={20} color=\"#FFFF00\"  size={50}></GiGoldBar>\r\n                  </Box>\r\n                  \r\n                </Box>\r\n              </Center>\r\n            </WrapItem>\r\n          </Link>\r\n        </Wrap>\r\n      </Box>\r\n\r\n    \r\n\r\n\r\n     </SimpleGrid>\r\n   \r\n\r\n\r\n\r\n    <Box textAlign=\"center\" fontSize=\"xl\" >\r\n\r\n  </Box>\r\n  </Box>\r\n  )\r\n}\r\n\r\nexport default Profile;","import { gql } from '@apollo/client';\r\n\r\nexport const ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      badges\r\n      games {\r\n        _id\r\n        score\r\n        decks {\r\n          _id\r\n          deckname\r\n          description\r\n          cards {\r\n            cardId\r\n            front\r\n            back\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USERS = gql`\r\n  {\r\n    users {\r\n      _id\r\n      username\r\n      email\r\n      badges\r\n      games {\r\n        _id\r\n        score\r\n        decks {\r\n          _id\r\n          deckname\r\n          description\r\n          cards {\r\n            cardId\r\n            front\r\n            back\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USER_BY_USERNAME = gql`\r\n  query user($username: String!) {\r\n    user(username: $username) {\r\n      _id\r\n      username\r\n      email\r\n      badges\r\n      games {\r\n        _id\r\n        score\r\n        decks {\r\n          _id\r\n          deckname\r\n          description\r\n          cards {\r\n            cardId\r\n            front\r\n            back\r\n          }\r\n        }\r\n      }\r\n    } \r\n  }\r\n`;\r\n\r\nexport const GET_DECK_ID = gql`\r\n  query deck($id: ID! ) {\r\n    deck(_id: $id) {\r\n        _id\r\n        deckname\r\n        description\r\n        cards {\r\n          front\r\n          back\r\n          cardId\r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_DECKS = gql`\r\n  {\r\n    decks {\r\n      _id\r\n      deckname\r\n      description\r\n      cards {\r\n        front\r\n        back\r\n        cardId\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n","import React, { useDebugValue } from 'react';\r\nimport { GET_DECKS, GET_USERS } from \"../../utils/queries\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  Text,\r\n  VStack,\r\n  Code,\r\n  Grid,\r\n  theme,\r\n  Flex,\r\n  Spacer, \r\n  Avatar,\r\n  Wrap, \r\n  WrapItem,\r\n  Center,\r\n  Image,\r\n  Badge,\r\n  Progress,\r\n  SimpleGrid\r\n} from '@chakra-ui/react';\r\nimport { \r\n    GiEmerald,\r\n    GiGoldBar\r\n   } from \"react-icons/gi\";\r\nimport Auth from '../../utils/auth';\r\nimport periodicTable from '../../assets/images/periodic-table.svg'\r\n  \r\n\r\nfunction Home() {\r\n     const testImage = {\r\n         name: 'Periodic Table of Elements',\r\n         cards: 118,\r\n        img: 'https://bit.ly/2Z4KKcF'\r\n     } \r\n\r\n     const deck = [\r\n    \r\n        {\r\n        name: 'Periodic Table of Elements',\r\n        cards: 118,\r\n        img: 'https://bit.ly/2Z4KKcF'\r\n        },\r\n        {\r\n          name: 'Flags of the world',\r\n          cards: 195,\r\n          img: 'https://bit.ly/2Z4KKcF'\r\n          },\r\n    \r\n      ]\r\n\r\n    \r\n\r\n    \r\n    // get all decks into data\r\n    const { loading, error, data } = useQuery(GET_DECKS);\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <h1> Loading </h1>\r\n    } else {\r\n        console.log(data)\r\n    }\r\n\r\n    /*\r\n                    \r\n                    <Box>\r\n                        <Image src={testImage.img} alt='placeholder' />\r\n                        <Box>\r\n                            {data.decks.deckname}\r\n                        </Box>\r\n                        <Box>\r\n                        {data.decks.cards.length} cards\r\n                        </Box>\r\n                    </Box>*/\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Box>\r\n\r\n        \r\n\r\n        <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n            Pick a Deck to Begin!\r\n        </Box>    \r\n\r\n        \r\n\r\n                \r\n          <Wrap  direction=\"column\"  justify=\"space-evenly\" align=\"center\">\r\n                {data && \r\n                data.decks.map(deck => (\r\n\r\n                    <Box>\r\n                    <WrapItem >  \r\n\r\n                    \r\n                    {Auth.loggedIn() ? (\r\n                        <>\r\n\r\n                    <Box \r\n                            boxShadow=\"2xl\" \r\n                            bg=\"red.200\"\r\n                            maxW=\"sm\"\r\n                            borderRadius=\"lg\" \r\n                            overflow=\"hidden\">\r\n                        <Link to={`/game/${deck._id}`} key={deck._id}> \r\n                        \r\n                            <Image src={periodicTable} alt='periodic table'  />\r\n                            <Box>\r\n                                {deck.deckname} of Elements\r\n                            </Box>\r\n                            <Box>\r\n                                {deck.cards.length} cards\r\n                            </Box>\r\n                            <Box ml={3} mr={3} >\r\n                                <Progress \r\n                                    colorScheme = \"purple\"\r\n                                    mb={2}\r\n                                    borderRadius=\"lg\"\r\n                                    value={1}\r\n                                    hasStripe=\"true\"\r\n                                    size=\"md\" \r\n                                />\r\n                            </Box>\r\n                            <Box align=\"center\" mb={3}>\r\n                                <GiEmerald w={20} h={20} color=\"#cd7f32\"  size={50}></GiEmerald>\r\n                            </Box>\r\n                            </Link>\r\n                        </Box>\r\n                        \r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                        <Box \r\n                            boxShadow=\"2xl\" \r\n                            bg=\"red.200\"\r\n                            maxW=\"sm\"\r\n                            borderRadius=\"lg\" \r\n                            overflow=\"hidden\">\r\n                    \r\n                        \r\n                            <Image src={periodicTable} alt='periodic table'  />\r\n                            <Box>\r\n                                {deck.deckname} of Elements\r\n                            </Box>\r\n                            <Box>\r\n                                {deck.cards.length} cards\r\n                            </Box>\r\n                            <Box ml={3} mr={3} >\r\n                                <Progress \r\n                                    colorScheme = \"purple\"\r\n                                    mb={2}\r\n                                    borderRadius=\"lg\"\r\n                                    value={1}\r\n                                    hasStripe=\"true\"\r\n                                    size=\"md\" \r\n                                />\r\n                            </Box>\r\n                            <Box align=\"center\" mb={3}>\r\n                                <GiEmerald w={20} h={20} color=\"#cd7f32\"  size={50}></GiEmerald>\r\n                            </Box>\r\n                      \r\n                        </Box>\r\n                        </>\r\n                    )}\r\n                    </WrapItem>    \r\n                    </Box> \r\n                ))}\r\n            </Wrap>\r\n      </Box>\r\n    )\r\n  }\r\n  \r\n  export default Home;\r\n","class GameSession {\r\n    constructor(deck, matrix) {\r\n        this.finished = false;\r\n        this.matrix = matrix;  // retrieved from DB or IndexedDb\r\n        this.deck = deck;\r\n        this.progress = 0; // for displaying progress on problem set - i.e. 6/10\r\n        this.cardsInSet = [];\r\n        this.problemSet = [];\r\n        this.correctCards = [];\r\n        this.incorrectCards = [];\r\n        this.currentQuestion = {};\r\n        this.result = [[], [], [], [], []];\r\n    }\r\n\r\n    // randomly reorder an array\r\n    shuffleArray(array) { \r\n        array.sort((a, b) => Math.random() - 0.5)\r\n        return array;\r\n    }\r\n\r\n    // get number of 'strong' cards and total number of cards in the game matrix\r\n    getTotal() {\r\n        // total number of cards in arrays [3] & [4]\r\n        let strongCards = 0;\r\n        // total all cards in the matrix \r\n        let total = 0;\r\n        for (let i=0; i<5; i++) {\r\n            if (i > 2) {\r\n                strongCards += this.matrix[i].length;\r\n            }\r\n            total += this.matrix[i].length;\r\n        }\r\n        return { strong: strongCards, total: total};\r\n    }\r\n\r\n    // pushes cards to matrix on first run and when 70% of current cards are in matrix[3] or matrix[4]\r\n    addNewCards(index) { // set index to 0 for first run, use total cards in matrix to determine index for each addition afterwards\r\n        let slicedCards;\r\n        let num = this.deck.length - index + 1;\r\n        if (this.deck.length - index + 1 < 15 ) {\r\n            slicedCards = this.deck.slice(index, index+num);\r\n        } else {\r\n            slicedCards = this.deck.slice(index, index+15);\r\n        }\r\n        // slice n cards from deck array, push to matrix[2]\r\n        slicedCards.forEach(card => this.matrix[2].push(card.cardId));\r\n        console.log(this.matrix);\r\n    }\r\n\r\n    // if this is not the first game, determine if cards need to be added based on 'score'\r\n    addCardsByScore() { \r\n        const score = this.getTotal();\r\n        if (score.strong/score.total >= 0.7) {\r\n            this.addNewCards(score.total);\r\n        }\r\n    }\r\n\r\n    // select cards based on a weighted random number generator\r\n    randomSelect() { \r\n        let check = Math.floor(Math.random() * 100);\r\n        let bin; \r\n        // determine which array in the matrix to pick from\r\n        if (check >= 0 && check < 40) {\r\n            bin = 0;\r\n        } else if (check >= 40 && check < 70){\r\n            bin = 1;\r\n        } else if (check >= 70 && check < 85){\r\n            bin = 2;\r\n        } else if (check >= 85 && check < 95){\r\n            bin = 3;\r\n        } else {\r\n            bin = 4;\r\n        }\r\n        // if the array has no objects, call the function again\r\n        if (this.matrix[bin].length < 1) {\r\n            this.randomSelect();\r\n        }\r\n\r\n        // if the array has entries, find the first one not already in this.cardsInSet\r\n        const newCard = this.matrix[bin].find((card) => {\r\n            return this.cardsInSet.indexOf(card) === -1\r\n        });\r\n\r\n        // if array has entries but all entries are already in this.cardsInSet, call function again\r\n        if (!newCard) {\r\n            this.randomSelect();\r\n        } else {\r\n            // if a card meets all criteria, push to this.cardsInSet array\r\n            this.cardsInSet.push(newCard);\r\n        }\r\n    }\r\n\r\n    // get cards from matrix to fill this.cardsInSet array\r\n    selectCards() {\r\n        // shuffle all arrays\r\n        for (let i=0; i<5; i++) {\r\n            this.shuffleArray(this.matrix[i])\r\n        }\r\n        // select random cards to fill this.cardsInSet\r\n        for (let j=0; j<10; j++) {\r\n            this.randomSelect();\r\n        }\r\n    }\r\n\r\n    // get all data for a card from the deck given its cardId\r\n    getCardData(cardId) { \r\n        var result = this.deck.filter(card => {\r\n            return card.cardId === cardId;\r\n        });\r\n        return result[0];\r\n    }\r\n\r\n     // create problem options from 2 random cards in set\r\n    generateOptions(cardId) {\r\n        let choices = this.cardsInSet.slice();\r\n        let results = [];\r\n        //console.log(`The main card is ${cardId}`);\r\n        choices.splice(choices.indexOf(cardId), 1);\r\n        //console.log(`The choices after removing card ${cardId} are: ${choices}`);\r\n        for (let i=0; i<2; i++) {\r\n            const random = Math.floor(Math.random()*choices.length); // we don't add +1 because we are indexing from\r\n            //console.log(`the card in spot ${i} is from index ${indexToRemove[0]} and is cardNumber ${this.cardsInSet[indexToRemove[0]]}`);\r\n            const optionCard = this.getCardData(choices[random]);\r\n            //console.log(optionCard);\r\n            results[i] = optionCard.back;\r\n            choices.splice(random, 1);\r\n            //console.log(`The choices after removing index ${indexToRemove[0]} are: ${choices}`);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    // create each \"problem\" as an object, then push to problemSet array.\r\n    createProblemSet() {\r\n        for (let i = 0; i < 10; i++) { \r\n            let problem = {question: '', options: [], answer: ''};\r\n            let card = this.getCardData(this.cardsInSet[i]);\r\n            problem.question = card.front;\r\n            let options = this.generateOptions(card.cardId);\r\n            options.push(card.back);\r\n            problem.options = this.shuffleArray(options);\r\n            problem.answer = card.back;\r\n            this.problemSet.push(problem);\r\n        }\r\n    }\r\n\r\n    // main game flow (up to creation of the problem set)\r\n    start() {\r\n        // are there cards?\r\n        const hasCards = this.getTotal(); \r\n        // if no, then this is the first run, add 15 cards, shuffle and add to set\r\n        if (hasCards.total === 0) { \r\n            this.addNewCards(0);\r\n            this.cardsInSet = this.shuffleArray(this.matrix[2]).slice(0,15);\r\n        // if yes, check current card status and add cards if necessary, then randomly add to set\r\n        } else if ((hasCards.total > 0)) { \r\n            this.addCardsByScore();\r\n            this.selectCards();\r\n        }\r\n        this.createProblemSet();\r\n        \r\n    }\r\n\r\n    // renders next problem (combines with React Components)\r\n    renderNext() {\r\n        if (this.progress < 10) {\r\n            const problem = this.problemSet[this.progress];\r\n            this.progress++;\r\n            if (this.progress === 9)  {\r\n                this.finished = true;\r\n            }\r\n            return problem;\r\n        } else {\r\n            this.tallyResults();\r\n        }\r\n    }\r\n\r\n    // checks the answer returns a boolean used to move card up or down one array in the matrix\r\n    isCorrect(bool) {\r\n        if (bool === true) {\r\n            console.log(`You are correct!`);\r\n            this.correctCards.push(this.cardsInSet.shift());\r\n            this.progress++;\r\n            return('correct');\r\n\r\n        } else {\r\n            console.log(`Sorry, that's not correct`);\r\n            this.incorrectCards.push(this.cardsInSet.shift());\r\n            this.progress++;\r\n            return('incorrect');\r\n        }\r\n    }\r\n\r\n    // increments the progress tracker after each \"problem\" is solved\r\n    // trackProgress() {\r\n\r\n    // }\r\n\r\n    // determine final results of set\r\n    tallyResults() {\r\n        console.log(`You've finished this round! \\nHere are your results:\\n\\nCorrect Answers: ${this.correctCards.length}\\nIncorrect Answers: ${this.incorrectCards.length}`);\r\n        this.resortMatrix(this.correctCards, true);\r\n        this.resortMatrix(this.incorrectCards, false);\r\n        this.correctCards = [];\r\n        this.incorrectCards = [];\r\n    }\r\n\r\n    // takes either this.correctCards with bool=true, or this.incorrectCards with bool=false\r\n    resortMatrix(arr, bool) {\r\n        arr.forEach(cardId => {\r\n            let cardIndex;\r\n            // iterates through arrays in this.matrix\r\n            for(let i=0; i<5; i++){\r\n                // looks for index of the cardId in each array\r\n                cardIndex = this.matrix[i].indexOf(cardId);\r\n                // if it finds it in the array, the card was correct and it is not in array 4\r\n                if (cardIndex !== -1 && bool === true && i<4) {\r\n                    // slice from current spot\r\n                    const card = this.matrix[i].splice(cardIndex, 1);\r\n                    //move to next highest array\r\n                    this.matrix[i+1].push(card[0]);\r\n                    break;\r\n                // if it finds it in the array, the card was incorrect and it is not in array 0\r\n                } else if (cardIndex !== -1 && bool === false && i>0) {\r\n                    const card = this.matrix[i].splice(cardIndex, 1);\r\n                    //move to next lowest array\r\n                    this.matrix[i-1].push(card[0]);\r\n                    break;\r\n                } else {\r\n                    continue\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // // at end of set review missed problems?\r\n    // review() {\r\n\r\n    // }\r\n\r\n    // // after set is completed, save results and new card positions to player game state (IndexedDB then finally graphql)\r\n    // saveResults() {\r\n        \r\n    // }\r\n    \r\n\r\n}\r\n\r\nexport default GameSession;","import React, { useState } from 'react';\r\nimport GameSession from '../../utils/gameLogic';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { GET_DECKS, GET_DECK_ID } from \"../../utils/queries\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n    MdBuild,\r\n    MdCall\r\n } from \"react-icons/md\"\r\nimport {\r\n    Box,\r\n    Flex,\r\n    Spacer,\r\n    Avatar,\r\n    Wrap,\r\n    WrapItem,\r\n    Center,\r\n    SimpleGrid,\r\n    Stack,\r\n    Button,\r\n    useToast,\r\n    toast\r\n} from '@chakra-ui/react';\r\n\r\n\r\n\r\nfunction Game() {\r\n    const [question, setQuestion] = useState('Press Start Game to play');\r\n    const [options, setOptions] = useState([]);\r\n    const [methods, setMethods] = useState({});\r\n\r\n    // Allow toast to work\r\n    const toast = useToast()\r\n\r\n\r\n    // this will display the URL ID value from the URL\r\n    //const { id: deckId } = useParams();\r\n    const { id } = useParams();\r\n    //console.log(thoughtId);\r\n\r\n    const { loading, data } = useQuery(GET_DECK_ID, {\r\n      // this is from the react router dom useParams id URL\r\n      //variables: { id: deckId }\r\n      variables: { id }\r\n    });\r\n\r\n    if (loading) {\r\n      return <h1>Loading...</h1>\r\n    } else {\r\n      console.log(data)\r\n    }\r\n  \r\n    function handleStart() {\r\n      const Game = new GameSession(data.deck.cards, [[], [], [], [], []]);\r\n      Game.start();\r\n      let currentQuestion;\r\n      currentQuestion = Game.renderNext();\r\n      setQuestion(currentQuestion.question);\r\n      setOptions(currentQuestion.options);\r\n      let answer = currentQuestion.answer;\r\n\r\n      return {\r\n        handleInput(e) {\r\n          const userInput = e.target.textContent;\r\n          console.log(answer)\r\n          alert(answer === userInput)\r\n          console.log(Game.problemSet);\r\n\r\n          if (!Game.finished) {\r\n            currentQuestion = Game.renderNext();\r\n            console.log(Game.finished);\r\n            setQuestion(currentQuestion.question);\r\n            setOptions(currentQuestion.options);\r\n            answer = currentQuestion.answer;\r\n          } else {\r\n            window.location.replace('/profile');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Box>\r\n      {/*Once you select the mode, a button to start will appear*/}\r\n\r\n      <Wrap  direction=\"row\"  justify=\"space-evenly\" align=\"center\">\r\n            <WrapItem p={2}>\r\n              <Button \r\n              boxShadow=\"2xl\" \r\n              leftIcon={<MdBuild />}\r\n               _hover={{bg:\"pink\"}} \r\n               size= \"lg\" \r\n               onClick={() =>\r\n                toast({\r\n                  title: \"Activated!\",\r\n                  description: \"Mode 1 Activated!\",\r\n                  status: \"info\",\r\n                  duration: 2800,\r\n                  isClosable: true,\r\n                  position: \"top\"\r\n                })\r\n              }\r\n               >\r\n                Mode 1 \r\n              </Button>\r\n            </WrapItem>\r\n            <WrapItem p={2}>\r\n              <Button \r\n              boxShadow=\"2xl\" \r\n              leftIcon={<MdBuild />} \r\n              _hover={{bg:\"pink\"}} \r\n              size = \"lg\"\r\n              onClick={() =>\r\n                toast({\r\n                  title: \"Activated!\",\r\n                  description: \"Mode 2 Activated!\",\r\n                  status: \"info\",\r\n                  duration: 2800,\r\n                  isClosable: true,\r\n                  position: \"top\"\r\n                })\r\n              }>\r\n                Mode 2\r\n              </Button>\r\n            </WrapItem>\r\n            <WrapItem p={2}>\r\n              <Button \r\n              boxShadow=\"2xl\" \r\n              leftIcon={<MdBuild />}\r\n              _hover={{bg:\"pink\"}} \r\n              size = \"lg\"\r\n              onClick={() =>\r\n                toast({\r\n                  title: \"Activated!\",\r\n                  description: \"Mode 3 Activated!\",\r\n                  status: \"info\",\r\n                  duration: 2800,\r\n                  isClosable: true,\r\n                  position: \"top\"\r\n                })\r\n              }>\r\n                Mode 3\r\n              </Button>\r\n            </WrapItem>\r\n        </Wrap>\r\n\r\n        \r\n      <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n           <Button \r\n           m={4} \r\n           boxShadow=\"2xl\"\r\n           onClick={() =>{\r\n            setMethods(handleStart()); \r\n          }\r\n          }\r\n          >\r\n                  Start Game\r\n            </Button>\r\n      </Box>     \r\n\r\n        <Box>\r\n        <Wrap  direction=\"column\"  justify=\"space-between\" align=\"center\">\r\n            <WrapItem \r\n            boxShadow=\"2xl\"\r\n            bg=\"red.200\"\r\n            maxW=\"sm\"\r\n            borderRadius=\"lg\" \r\n            overflow=\"hidden\">\r\n              <Center w=\"350px\" h=\"400px\" bg=\"red.200\">\r\n                {question}\r\n              </Center>\r\n            </WrapItem>\r\n\r\n        </Wrap>\r\n\r\n        <Wrap  direction=\"row\"  justify=\"space-evenly\" align=\"center\" mt={5}>\r\n          {options.map(option => (\r\n            <WrapItem key={option} p={2}>\r\n              <Button \r\n              boxShadow=\"2xl\"  \r\n              onClick={e => {\r\n                methods.handleInput(e)\r\n              }}\r\n              >\r\n                {option}\r\n              </Button>\r\n            </WrapItem>\r\n          ))}\r\n        </Wrap>\r\n\r\n        <Wrap  direction=\"row\"  justify=\"space-evenly\" align=\"center\" mt={5}>\r\n\r\n              <Button \r\n                boxShadow=\"2xl\"  \r\n                onClick={() =>\r\n                  toast({\r\n                    title: \"Incorrect!\",\r\n                    description: \"Question will show up again!\",\r\n                    status: \"error\",\r\n                    duration: 2800,\r\n                    isClosable: true,\r\n                  })\r\n                }\r\n                >\r\n                  Incorrect Answer!\r\n              </Button>\r\n\r\n              <Button \r\n                  boxShadow=\"2xl\"  \r\n                  onClick={() =>\r\n                  toast({\r\n                    title: \"Correct!\",\r\n                    description: \"Correct answer provided!\",\r\n                    status: \"success\",\r\n                    duration: 2800,\r\n                    isClosable: true,\r\n                  })\r\n                  }\r\n                  >\r\n                  Correct Answer!\r\n              </Button>\r\n\r\n              <Button \r\n                boxShadow=\"2xl\"  \r\n                onClick={() =>\r\n                  toast({\r\n                    title: \"Incorrect!\",\r\n                    description: \"Question will show up again!\",\r\n                    status: \"error\",\r\n                    duration: 2800,\r\n                    isClosable: true,\r\n                  })\r\n                }\r\n                >\r\n                  Incorrect Answer!\r\n              </Button>\r\n     \r\n        \r\n        </Wrap>\r\n\r\n            \r\n   \r\n        </Box>\r\n\r\n    </Box>\r\n    )\r\n  }\r\n  \r\n  export default Game;\r\n","import React, { useState } from 'react';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  Text,\r\n  Link,\r\n  VStack,\r\n  Code,\r\n  Grid,\r\n  theme,\r\n  Flex,\r\n  Spacer, \r\n  Avatar,\r\n  Wrap, \r\n  WrapItem,\r\n  Center\r\n} from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\r\nimport { Logo } from './Logo';\r\nimport Nav from './components/Nav';\r\nimport Profile from './components/Profile';\r\nimport Home from './components/Home';\r\nimport Game from './components/Game';\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem('id_token')\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : ''\r\n      }\r\n    })\r\n  },\r\n  uri: '/graphql',\r\n})\r\n\r\nfunction App() {\r\n\r\n  const [navLinkSelected, setNavLinkSelected] = useState('Home');\r\n\r\n  //navLinkSelected={navLinkSelected} setNavLinkSelected={setNavLinkSelected}\r\n\r\n  const renderPage = () => {\r\n\r\n\r\n\r\n    switch (navLinkSelected) {\r\n      case 'Profile':\r\n        return <Profile />;\r\n      case 'Home':\r\n       return <Home>\r\n       </Home>\r\n      case 'Game':\r\n        return <Game />;\r\n      default:\r\n        return <Home />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n    <Router>\r\n      <ChakraProvider theme={theme}>\r\n        <Box textAlign=\"center\" fontSize=\"xl\" >\r\n          {/*Start of Header - move to header component*/}\r\n          <ColorModeSwitcher justifySelf=\"flex-end\" m={5} />\r\n          <Nav navLinkSelected={navLinkSelected} setNavLinkSelected={setNavLinkSelected}>\r\n          </Nav>     \r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/profile\" component={Profile} />\r\n            <Route exact path=\"/game/:id\" component={Game} />\r\n          </Switch>\r\n          {/*End of Header*/}\r\n\r\n          <main>\r\n              {/* Call the renderPage function passing in the currentPage */}\r\n              {/*<div>{renderPage(navLinkSelected)}</div> */}\r\n          </main>\r\n\r\n        \r\n        </Box>\r\n      </ChakraProvider>\r\n    </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\n/* column flex default sample\r\n          <VStack spacing={8}>\r\n            <Logo h=\"40vmin\" pointerEvents=\"none\" />\r\n            <Text>\r\n              Edit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\r\n            </Text>\r\n            <Link\r\n              color=\"teal.500\"\r\n              href=\"https://chakra-ui.com\"\r\n              fontSize=\"2xl\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Learn Chakra\r\n            </Link>\r\n          </VStack>\r\n\r\n*/\r\n\r\n/* example of grid\r\n\r\n        <Grid minH=\"100vh\" p={3}>\r\n\r\n         \r\n\r\n        </Grid>\r\n\r\n*/\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\r\nimport React, { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n","module.exports = __webpack_public_path__ + \"static/media/periodic-table.2a4635af.svg\";"],"sourceRoot":""}