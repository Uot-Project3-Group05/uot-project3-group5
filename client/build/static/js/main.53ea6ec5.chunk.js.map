{"version":3,"sources":["assets/images/svg3.svg","assets/images/periodic-table.svg","logo.svg","assets/images/logoMD.png","assets/images/flags-world.png","ColorModeSwitcher.js","Logo.js","utils/mutations.js","utils/auth.js","components/Signup/index.js","components/Login/index.js","components/Nav/index.js","utils/queries.js","components/Profile/index.js","components/Home/index.js","utils/helpers.js","utils/gameLogic.js","components/Game/index.js","components/Leaderboard/index.js","App.js","serviceWorker.js","index.js","assets/images/svg1.svg","assets/images/svg2.svg"],"names":["module","exports","__webpack_require__","p","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","react_default","a","createElement","icon_button","Object","assign","size","fontSize","aria-label","concat","variant","color","marginLeft","onClick","icon","keyframes","_templateObject","taggedTemplateLiteral","LOGIN","gql","mutations_templateObject","ADD_USER","_templateObject2","UPDATE_GAME","_templateObject3","ADD_GAME","_templateObject4","auth","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","removeItem","SignupForm","_useState","useState","username","email","password","_useState2","slicedToArray","userFormData","setUserFormData","_useState3","validated","_useMutation","useMutation","_useMutation2","addUser","error","handleInputChange","event","_event$target","target","name","value","objectSpread","defineProperty","_useMutation3","addGame","handleFormSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","decks","_yield$addUser","data","wrap","_context","prev","next","preventDefault","variables","sent","Auth","login","console","log","forEach","deck","e","t0","stop","_x","apply","arguments","Fragment","noValidate","onSubmit","form_control","isRequired","mt","form_label","input","type","placeholder","onChange","htmlFor","esm_button","message","toString","includes","substring","length","LoginForm","loginUser","_yield$loginUser","Nav","navLinkSelected","setNavLinkSelected","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","flex","box","link_box","react_router_dom","to","esm_image","src","logo","alt","w","h","spacer","d","alignItems","mr","loggedIn","logout","avatar","modal","tabs","Login","Signup","GET_DECK_ID","queries_templateObject","queries_templateObject2","queries_templateObject3","queries_templateObject4","GET_DECKS","_templateObject5","GET_GAME_BY_DECK_NAME","_templateObject6","GET_ALL_DECKS_BY_USER","_templateObject7","Profile","svg0","svg1","svg2","useToast","_useQuery","useQuery","loading","imgArray","i","getAllGame","image","textAlign","mb","justify","align","map","center","boxShadow","bg","borderRadius","maxW","overflow","score","ml","progress","colorScheme","hasStripe","gi_index_esm","Home","toast","notAuthenticated","title","description","status","duration","isClosable","position","storeName","method","object","Promise","resolve","reject","db","tx","store","request","indexedDB","open","onupgradeneeded","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","key","deckname","cards","GameSession","matrix","classCallCheck","finished","cardsInSet","problemSet","correctCards","incorrectCards","currentQuestion","gameMode","array","sort","b","Math","random","gameOver","strongCards","total","deckTotal","strong","index","_this","num","slice","card","push","cardId","getTotal","addNewCards","newCard","_this2","bins","binRollCount","binStartLength","checkRollCount","j","roll","floor","find","indexOf","shuffleArray","randomSelect","filter","side","choices","results","splice","optionCard","getCardData","back","front","bool","problem","question","options","answer","generateOptions","useSide","reset","hasCards","addCardsByScore","selectCards","createProblemSet","tallyResults","shift","correct","incorrect","resortMatrix","arr","_this3","cardIndex","Game","gameStarted","setGameStarted","_useState4","setQuestion","_useState5","_useState6","cardAnswer","setCardAnswer","_useState7","_useState8","setOptions","_useState9","_useState10","methods","setMethods","_useState11","_useState12","setGameMode","_useState13","_useState14","numCorrectAnswer","SetNumCorrectAnswer","ref","useRef","id","useParams","_useQuery2","skip","loadingGame","gameData","updateGame","getGame","direction","leftIcon","md_index_esm","_hover","m","start","renderNext","matrixState","handleInput","userInput","textContent","isCorrect","current","toggle","tallyAnswer","updateGameData","setTimeout","handleStart","index_cjs_default","flipOnHover","flipOnClick","index_cjs","style","backgroundColor","animationDuration","option","Leaderboard","esm_select","width","table","client","ApolloClient","operation","setContext","headers","authorization","uri","App","index_esm","chakra_provider","theme","ColorModeSwitcher_ColorModeSwitcher","justifySelf","components_Nav","react_router","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","react","esm","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","Service-Worker","response","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.53ea6ec5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/svg3.e72523d1.svg\";","module.exports = __webpack_public_path__ + \"static/media/periodic-table.2a4635af.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.d1ce8d9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logoMD.ae4a0349.png\";","module.exports = __webpack_public_path__ + \"static/media/flags-world.aff4ceb1.png\";","import React from 'react';\r\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\r\nimport { FaMoon, FaSun } from 'react-icons/fa';\r\n\r\nexport const ColorModeSwitcher = props => {\r\n  const { toggleColorMode } = useColorMode();\r\n  const text = useColorModeValue('dark', 'light');\r\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\r\n\r\n  return (\r\n    <IconButton\r\n      size=\"md\"\r\n      fontSize=\"lg\"\r\n      aria-label={`Switch to ${text} mode`}\r\n      variant=\"ghost\"\r\n      color=\"current\"\r\n      marginLeft=\"2\"\r\n      onClick={toggleColorMode}\r\n      icon={<SwitchIcon />}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Image, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';\r\nimport logo from './logo.svg';\r\n\r\nconst spin = keyframes`\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n`;\r\n\r\nexport const Logo = props => {\r\n  const prefersReducedMotion = usePrefersReducedMotion();\r\n\r\n  const animation = prefersReducedMotion\r\n    ? undefined\r\n    : `${spin} infinite 20s linear`;\r\n\r\n  return <Image animation={animation} src={logo} {...props} />;\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation loginUser($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token \r\n      user {\r\n        _id\r\n        username\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_GAME = gql`\r\n  mutation updateGame($deck: String!, $score: Int!, $matrix: [[Int]]!) {\r\n    updateGame(deck: $deck, score: $score, matrix: $matrix) {\r\n      userId\r\n      deck\r\n      score\r\n      matrix\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_GAME = gql`\r\n  mutation addGame($deck: String!) {\r\n    addGame(deck: $deck) {\r\n      _id\r\n      score\r\n      deck\r\n      userId\r\n      deck\r\n      matrix\r\n    }\r\n  }\r\n`;","import decode from 'jwt-decode';\r\n\r\n// a new class will be created everytime it is imported\r\n// by any component\r\n\r\nclass AuthService {\r\n    // retrieve data saved in token\r\n    getProfile() {\r\n      return decode(this.getToken());\r\n    }\r\n  \r\n    // check if the user is still logged in\r\n    loggedIn() {\r\n      // Checks if there is a saved token and it's still valid\r\n      const token = this.getToken();\r\n      // use type coersion to check if token is NOT undefined and the token is NOT expired\r\n      return !!token && !this.isTokenExpired(token);\r\n    }\r\n  \r\n    // check if the token has expired\r\n    isTokenExpired(token) {\r\n      try {\r\n        const decoded = decode(token);\r\n        if (decoded.exp < Date.now() / 1000) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } catch (err) {\r\n        return false;\r\n      }\r\n    }\r\n  \r\n    // retrieve token from localStorage\r\n    getToken() {\r\n      // Retrieves the user token from localStorage\r\n      return localStorage.getItem('id_token');\r\n    }\r\n  \r\n    // set token to localStorage and reload page to homepage\r\n    login(idToken) {\r\n      // Saves user token to localStorage\r\n      localStorage.setItem('id_token', idToken);\r\n  \r\n      window.location.assign('/');\r\n    }\r\n  \r\n    // clear token from localStorage and force logout with reload\r\n    logout() {\r\n      // Clear user token and profile data from localStorage\r\n      localStorage.removeItem('id_token');\r\n      // this will reload the page and reset the state of the application\r\n      window.location.assign('/');\r\n    }\r\n  }\r\n\r\nexport default new AuthService();","import React, { useState } from 'react';\r\nimport { Form, Button, Alert, FormControl, FormLabel, FormErrorMessage, FormHelperText, Input } from '@chakra-ui/react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\n//import { createUser } from '../utils/API';\r\nimport { ADD_USER, ADD_GAME } from '../../utils/mutations'\r\nimport Auth from '../../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState('false');\r\n  // set state for alert\r\n  //const [showAlert, setShowAlert] = useState('false');\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });    \r\n  };\r\n\r\n  // Load Games into the database for the user to play later\r\n  const [addGame] = useMutation(ADD_GAME);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    \r\n    const decks = [\r\n      'Periodic Table',\r\n      'Famous Fiction',\r\n      'US States and Capitols'\r\n    ]\r\n  \r\n    \r\n    //dont need this for chakra ui\r\n    /*// check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;    \r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }*/\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData }\r\n      });\r\n    //  const { token, user } = await response.json();\r\n    //  console.log(user);\r\n      Auth.login(data.addUser.token);\r\n\r\n      console.log(\"User has signed up and logged in\")\r\n\r\n      // execute addGame mutation and pass in variable data from form\r\n      decks.forEach(deck => {\r\n        try {\r\n          const addGameData = addGame({\r\n            variables: { deck }\r\n          });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n\r\n      })\r\n\r\n      console.log(\"Games Added\")\r\n\r\n    } catch (err) {\r\n      console.error(err);\r\n      //setShowAlert('true');\r\n    }\r\n\r\n   /* setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });*/\r\n\r\n    \r\n  };\r\n\r\n  // Disable button logic test\r\n  //disabled={!(userFormData.username && userFormData.email && userFormData.password)\r\n\r\n\r\n  \r\n \r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above*/}\r\n      <form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        {/* <Alert onClose={() => setShowAlert('false')} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert> */}\r\n\r\n        <FormControl isRequired  mt={2}>                      \r\n          <FormLabel name='username'>Username</FormLabel>\r\n          <Input name='username'\r\n          type='text' \r\n          placeholder='Your username' \r\n          value={userFormData.username}\r\n          onChange={handleInputChange}         \r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl isRequired mt={2}>\r\n          <FormLabel htmlFor='email'>Email</FormLabel>\r\n          <Input name='email' \r\n          type='email' \r\n          placeholder='Your email address'\r\n          value={userFormData.email}\r\n          onChange={handleInputChange}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl isRequired mt={2}>\r\n          <FormLabel htmlFor='password'>Password</FormLabel>\r\n          <Input name='password'\r\n          type='password' \r\n          placeholder='Your Password'\r\n          value={userFormData.password}\r\n          onChange={handleInputChange}\r\n          />\r\n        </FormControl>\r\n        <Button\r\n          type='submit'\r\n          mt={2}\r\n          >\r\n          Submit\r\n        </Button>\r\n      </form>\r\n      {error && <div>{error.message.toString().includes('duplicate') ? 'User with email id exist!' : error.message.substring(14,error.message.length)}</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;","import React, { useState } from 'react';\r\nimport { Form, \r\n  Button, \r\n  Alert, \r\n  FormControl, \r\n  FormLabel, \r\n  FormErrorMessage, \r\n  FormHelperText, \r\n  Input,\r\n} from '@chakra-ui/react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\n//import { createUser } from '../utils/API';\r\nimport { LOGIN } from '../../utils/mutations'\r\nimport Auth from '../../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState('false');\r\n  // set state for alert\r\n  //const [showAlert, setShowAlert] = useState('false');\r\n\r\n  const [loginUser, { error }] = useMutation(LOGIN);\r\n  \r\n  \r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });    \r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    \r\n    /* don't need this for chakra UI\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;    \r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }*/\r\n\r\n    try {\r\n      const { data } = await loginUser({\r\n        variables: { ...userFormData }\r\n      });\r\n      \r\n\r\n    //  const { token, user } = await response.json();\r\n    //  console.log(user);\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      //setShowAlert('true');\r\n    }\r\n\r\n   /* setUserFormData({      \r\n      email: '',\r\n      password: '',\r\n    });*/\r\n  };\r\n\r\n  // Disable button logic test\r\n  //disabled={!(userFormData.email && userFormData.password)}\r\n  \r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above*/}\r\n      <form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        {/* <Alert onClose={() => setShowAlert('false')} show={showAlert} variant='danger'>\r\n          Something went wrong with your login!\r\n        </Alert> */}\r\n   \r\n\r\n        <FormControl isRequired mt={2}>\r\n          <FormLabel htmlFor='email'>Email</FormLabel>\r\n          <Input name='email' \r\n          type='email' \r\n          placeholder='Your email address' \r\n          value={userFormData.email}\r\n          onChange={handleInputChange}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl isRequired mt={2}>    \r\n          <FormLabel htmlFor='password'>Password</FormLabel>\r\n          <Input name='password' \r\n          type='password' \r\n          placeholder='Your Password'\r\n          value={userFormData.password}\r\n          onChange={handleInputChange}\r\n          />\r\n        </FormControl>\r\n        <Button\r\n          type='submit'\r\n          mt={2}\r\n          >\r\n          Submit\r\n        </Button>\r\n      </form>\r\n      {error && <div>{error.message.substring(14,error.message.length)}</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Spacer,\r\n  Avatar,\r\n  LinkBox,\r\n  LinkOverlay,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Tabs, \r\n  TabList, \r\n  TabPanels, \r\n  Tab, \r\n  TabPanel,\r\n  Button,\r\n  useDisclosure,\r\n  Image\r\n\r\n} from '@chakra-ui/react';\r\n\r\nimport logo from '../../assets/images/logoMD.png'\r\n\r\n\r\nimport { CopyIcon } from '@chakra-ui/icons';\r\n\r\nimport SignupForm from '../Signup';\r\nimport LoginForm from '../Login';\r\nimport Auth from '../../utils/auth';\r\n\r\n\r\n\r\nfunction Nav(props) {\r\n\r\n  const {\r\n    navLinkSelected,\r\n    setNavLinkSelected\r\n   \r\n  } = props;\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n//  href=\"#Home\" \r\n//  onClick={() => setNavLinkSelected('Home')}\r\n//LinkOverlay \r\n// href=\"#Profile\" \r\n// onClick={() => setNavLinkSelected('Profile')}\r\n\r\n  // logout function \r\n  const logout = event => {\r\n    // this will stop the a element from refreshing the page\r\n    event.preventDefault();\r\n    Auth.logout();\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <Flex>    \r\n      <Box p=\"4\" >\r\n        <LinkBox>\r\n        <Link \r\n          to={`/`}\r\n          > \r\n          <Image src={logo} alt='placeholder' \r\n          w={20} h={20} \r\n          />\r\n        \r\n        </Link>\r\n        </LinkBox>        \r\n      </Box>\r\n      <Spacer />\r\n      <Box p=\"4\" d='flex' alignItems='center'>\r\n        <Box mr={3}>\r\n        {Auth.loggedIn() ? (\r\n            <>\r\n              <Button onClick={logout}>LogOut</Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button onClick={onOpen}>Login/Signup</Button>\r\n            </>\r\n          )}\r\n          \r\n        </Box>\r\n        {/*<Avatar name=\"Dan Abrahmov\" src=\"https://bit.ly/dan-abramov\" />*/}\r\n        {Auth.loggedIn() && <LinkBox>\r\n        <Link \r\n          to={`/profile`}\r\n        >\r\n        <Avatar size=\"xl\" ></Avatar>\r\n        </Link>\r\n        </LinkBox>}\r\n\r\n      </Box>\r\n    </Flex>\r\n    <Modal isOpen={isOpen} onClose={onClose} size={'lg'}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalCloseButton />\r\n        <Tabs variant='enclosed'>\r\n          <TabList>\r\n            <Tab>Login</Tab>\r\n            <Tab>Signup</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              {/* <ModalContent> */}                \r\n                <ModalBody>\r\n                  <LoginForm />\r\n                </ModalBody>          \r\n              {/* </ModalContent> */}\r\n            </TabPanel>\r\n            <TabPanel>\r\n              {/* <ModalContent> */}                              \r\n                <ModalBody>\r\n                  <SignupForm />\r\n                </ModalBody>          \r\n              {/* </ModalContent> */}\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </ModalContent>        \r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Nav;","import { gql } from '@apollo/client';\r\n\r\nexport const ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      badges\r\n      games {\r\n        _id\r\n        score\r\n        decks {\r\n          _id\r\n          deckname\r\n          description\r\n          cards {\r\n            cardId\r\n            front\r\n            back\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USERS = gql`\r\n  {\r\n    users {\r\n      _id\r\n      username\r\n      email\r\n      badges\r\n      games {\r\n        _id\r\n        score\r\n        decks {\r\n          _id\r\n          deckname\r\n          description\r\n          cards {\r\n            cardId\r\n            front\r\n            back\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USER_BY_USERNAME = gql`\r\n  query user($username: String!) {\r\n    user(username: $username) {\r\n      _id\r\n      username\r\n      email\r\n      badges\r\n      games {\r\n        _id\r\n        score\r\n        decks {\r\n          _id\r\n          deckname\r\n          description\r\n          cards {\r\n            cardId\r\n            front\r\n            back\r\n          }\r\n        }\r\n      }\r\n    } \r\n  }\r\n`;\r\n\r\nexport const GET_DECK_ID = gql`\r\n  query deck($id: ID! ) {\r\n    deck(_id: $id) {\r\n        _id\r\n        deckname\r\n        description\r\n        cards {\r\n          front\r\n          back\r\n          cardId\r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_DECKS = gql`\r\n  {\r\n    decks {\r\n      _id\r\n      deckname\r\n      description\r\n      cards {\r\n        front\r\n        back\r\n        cardId\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_GAME_BY_DECK_NAME = gql`\r\n  query getGame($deck: String!) {\r\n    getGame(deck: $deck) {\r\n      _id\r\n      score\r\n      deck\r\n      userId\r\n      deck\r\n      matrix\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ALL_DECKS_BY_USER = gql`\r\n    {\r\n      getAllGame {\r\n        userId\r\n        deck\r\n        score\r\n        matrix\r\n      }\r\n    }\r\n`;\r\n\r\n","import React from 'react';\r\nimport { GET_ALL_DECKS_BY_USER } from \"../../utils/queries\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport svg0 from '../../assets/images/svg1.svg';\r\nimport svg1 from '../../assets/images/svg2.svg';\r\nimport svg2 from '../../assets/images/svg3.svg';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Spacer,\r\n  Avatar,\r\n  Wrap,\r\n  WrapItem,\r\n  Center,\r\n  SimpleGrid,\r\n  Image,\r\n  Progress,\r\n  CircularProgress,\r\n  CircularProgressLabel,\r\n  Button,\r\n  useToast\r\n} from '@chakra-ui/react';\r\n\r\nimport {\r\n  MdBuild,\r\n  MdCall\r\n} from \"react-icons/md\"\r\n\r\nimport {\r\n  GiEmerald,\r\n  GiGoldBar\r\n} from \"react-icons/gi\";\r\n\r\nimport periodicTable from '../../assets/images/periodic-table.svg'\r\nimport flagsWorld from '../../assets/images/flags-world.png'\r\n\r\n\r\n\r\n\r\nfunction Profile() {\r\n\r\n  const deckImage = [\r\n    {\r\n      name: 'Periodic Table of Elements',\r\n      cards: 118,\r\n      img: svg0\r\n    },\r\n    {\r\n      name: 'Famous Fiction',\r\n      cards: 75,\r\n      img: svg1\r\n    },\r\n    {\r\n      name: 'US States and Capitals',\r\n      cards: 50,\r\n      img: svg2\r\n    }\r\n  ];\r\n\r\n\r\n\r\n  const toast = useToast()\r\n  // Get all decks for the logged in user.\r\n  const { loading, data } = useQuery(GET_ALL_DECKS_BY_USER);\r\n\r\n  if (loading) {\r\n    return <h1> Loading </h1>\r\n  } else {\r\n    console.log(data)\r\n  }\r\n\r\n\r\n  const imgArray = [svg0, svg1, svg2];\r\n\r\n  for (let i = 0; i < data.getAllGame.length; i++) {\r\n    data.getAllGame[i].image = imgArray[i];\r\n  }\r\n\r\n  \r\n//   const imgArray = [svg0, svg1, svg2];\r\n\r\n//   for (let i = 0; i < 3; i++) {\r\n//     data.getAllGame[i].image = imgArray[i];\r\n// }\r\n\r\n\r\n\r\n  //<GiEmerald w={20} h={20} color=\"blue.200\" ></GiEmerald>\r\n  //GiEmerald\r\n\r\n  return (\r\n    <Box>\r\n\r\n      <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n        Pick a Deck a Game\r\n    </Box>\r\n\r\n    {/*\r\n      <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n        <Link to={`/leaderboard`}>\r\n          <Button\r\n            boxShadow=\"2xl\"\r\n            leftIcon={<MdBuild />}\r\n            _hover={{ bg: \"pink\" }}\r\n            size=\"lg\"\r\n            onClick={() =>\r\n              toast({\r\n                title: \"Activated!\",\r\n                description: \"Mode 1 Activated!\",\r\n                status: \"info\",\r\n                duration: 2800,\r\n                isClosable: true,\r\n                position: \"top\"\r\n              })\r\n            }\r\n          >\r\n            Go to Leaderboard!\r\n          </Button>\r\n        </Link>\r\n      </Box>\r\n          */}\r\n\r\n      \r\n\r\n          \r\n        <Box >\r\n\r\n\r\n          {/*\r\n          <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n            In Progress\r\n         \r\n        </Box>\r\n         */}\r\n         \r\n          <Wrap  justify=\"space-evenly\" align=\"center\">\r\n            \r\n          {data &&\r\n              data.getAllGame.map(deck => (\r\n             \r\n              <Link to={`/`}>\r\n              <WrapItem align=\"center\">                 \r\n                <Center boxShadow=\"2xl\" bg=\"red.200\" borderRadius=\"lg\">\r\n                  <Box maxW=\"sm\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"hidden\">\r\n                    <Image src={deck.image} alt='Periodic Table' />\r\n                    <Box>\r\n                      {deck.deck}\r\n                    </Box>\r\n                    <Box>\r\n                      {deck.score} strong cards\r\n                  </Box>\r\n                    <Box ml={3} mr={3} >\r\n                      <Progress\r\n                        colorScheme=\"purple\"\r\n                        mb={2}\r\n                        borderRadius=\"lg\"\r\n                        value={deck.score}\r\n                        hasStripe=\"true\"\r\n                        size=\"md\" />\r\n                    </Box>\r\n                    <Box align=\"center\" mb={3}>\r\n                      <GiEmerald w={20} h={20} color=\"#cd7f32\" size={50}></GiEmerald>\r\n                    </Box>\r\n\r\n                  </Box>\r\n                </Center>\r\n              </WrapItem>\r\n              </Link>\r\n              \r\n           ))}\r\n        \r\n           \r\n          </Wrap>\r\n        </Box>\r\n\r\n        {/*\r\n        <Box >\r\n          <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n            Completed\r\n        </Box>\r\n          <Wrap direction=\"column\" align=\"center\">\r\n            <Link to={`/game/12345`}>\r\n              <WrapItem >\r\n                <Center boxShadow=\"2xl\" bg=\"red.200\" borderRadius=\"lg\">\r\n                  <Box maxW=\"sm\"\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"hidden\">\r\n                    <Image src={flagsWorld} alt='Flags of the World' />\r\n                    <Box>\r\n                      {deck[1].name}\r\n                    </Box>\r\n                    <Box>\r\n                      {deck[1].cards} cards\r\n                  </Box>\r\n                    <Box ml={3} mr={3} >\r\n                      <Progress\r\n                        colorScheme=\"purple\"\r\n                        mb={2}\r\n                        borderRadius=\"lg\"\r\n                        value={100}\r\n                        hasStripe=\"true\"\r\n                        size=\"md\" />\r\n                    </Box>\r\n                    <Box align=\"center\" mb={3}>\r\n                      <GiGoldBar w={20} h={20} color=\"#FFFF00\" size={50}></GiGoldBar>\r\n                    </Box>\r\n                  </Box>\r\n                </Center>\r\n              </WrapItem>\r\n            </Link>\r\n          </Wrap>\r\n        </Box>\r\n        */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <Box textAlign=\"center\" fontSize=\"xl\" >\r\n\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useDebugValue } from 'react';\r\nimport { GET_DECKS, GET_USERS } from \"../../utils/queries\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n    ChakraProvider,\r\n    Box,\r\n    Text,\r\n    VStack,\r\n    Code,\r\n    Grid,\r\n    theme,\r\n    Flex,\r\n    Spacer,\r\n    Avatar,\r\n    Wrap,\r\n    WrapItem,\r\n    Center,\r\n    Image,\r\n    Badge,\r\n    Progress,\r\n    SimpleGrid,\r\n    useToast\r\n} from '@chakra-ui/react';\r\nimport {\r\n    GiEmerald,\r\n    GiGoldBar\r\n} from \"react-icons/gi\";\r\nimport Auth from '../../utils/auth';\r\nimport svg0 from '../../assets/images/svg1.svg';\r\nimport svg1 from '../../assets/images/svg2.svg';\r\nimport svg2 from '../../assets/images/svg3.svg';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction Home() {\r\n    const testImage = {\r\n        name: 'Periodic Table of Elements',\r\n        cards: 118,\r\n        img: 'https://bit.ly/2Z4KKcF'\r\n    }\r\n    const toast = useToast();\r\n\r\n    function notAuthenticated() {\r\n        toast({\r\n            title: 'Authentication Error',\r\n            description: 'You need to be logged in!',\r\n            status: 'error',\r\n            duration: 1500,\r\n            isClosable: true,\r\n            position: 'top'\r\n        })\r\n    }\r\n\r\n\r\n    const deck = [\r\n\r\n        {\r\n            name: 'Periodic Table of Elements',\r\n            cards: 118\r\n        },\r\n        {\r\n            name: 'Famous Fiction',\r\n            cards: 75\r\n        },\r\n        {\r\n            name: 'US States and Capitals',\r\n            cards: 50\r\n        }\r\n    ];\r\n\r\n\r\n\r\n\r\n    // get all decks into data\r\n    const { loading, error, data } = useQuery(GET_DECKS);\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <h1> Loading </h1>\r\n    }\r\n\r\n    const imgArray = [svg0, svg1, svg2];\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        data.decks[i].image = imgArray[i];\r\n    }\r\n    \r\n    // Index DB logic to save decks\r\n    data.decks.forEach(deck => idbPromise('decks', 'put', deck));\r\n\r\n    /*\r\n                    \r\n                    <Box>\r\n                        <Image src={testImage.img} alt='placeholder' />\r\n                        <Box>\r\n                            {data.decks.deckname}\r\n                        </Box>\r\n                        <Box>\r\n                        {data.decks.cards.length} cards\r\n                        </Box>\r\n                    </Box>*/\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Box>\r\n\r\n\r\n\r\n            <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n                Pick a Deck to Begin!\r\n        </Box>\r\n\r\n\r\n\r\n\r\n            <Wrap justify=\"space-evenly\" align=\"center\">\r\n                {data &&\r\n                    data.decks.map(deck => (\r\n                     \r\n                            <WrapItem >\r\n\r\n                                {Auth.loggedIn() ? (\r\n                                    <>\r\n\r\n                                    <Center>\r\n                                        <Box\r\n                                            boxShadow=\"2xl\"\r\n                                            bg=\"red.200\"\r\n                                            maxW=\"sm\"\r\n                                            borderRadius=\"lg\"\r\n                                            overflow=\"hidden\">\r\n                                            <Link to={`/game/${deck._id}`} key={deck._id}>\r\n\r\n                                                <Image src={deck.image} alt='periodic table' />\r\n                                                <Box>\r\n                                                    {deck.deckname}\r\n                                                </Box>\r\n                                                <Box>\r\n                                                    {deck.cards.length} cards\r\n                                             </Box>\r\n                                                <Box ml={3} mr={3} >\r\n                                                    <Progress\r\n                                                        colorScheme=\"purple\"\r\n                                                        mb={2}\r\n                                                        borderRadius=\"lg\"\r\n                                                        value={1}\r\n                                                        hasStripe=\"true\"\r\n                                                        size=\"md\"\r\n                                                    />\r\n                                                </Box>\r\n                                                <Box align=\"center\" mb={3}>\r\n                                                    <GiEmerald w={20} h={20} color=\"#cd7f32\" size={50}></GiEmerald>\r\n                                                </Box>\r\n                                            </Link>\r\n                                        </Box>\r\n                                        </Center>\r\n\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n\r\n                                    <Center>\r\n                                        <Box\r\n                                            boxShadow=\"2xl\"\r\n                                            bg=\"red.200\"\r\n                                            maxW=\"sm\"\r\n                                            borderRadius=\"lg\"\r\n                                            overflow=\"hidden\"\r\n                                            onClick={notAuthenticated}\r\n                                        >\r\n\r\n\r\n                                            <Image src={deck.image} alt='periodic table' />\r\n                                            <Box>\r\n                                                {deck.deckname}\r\n                                            </Box>\r\n                                            <Box>\r\n                                                {deck.cards.length} cards\r\n                                          </Box>\r\n                                            <Box ml={3} mr={3} >\r\n                                                <Progress\r\n                                                    colorScheme=\"purple\"\r\n                                                    mb={2}\r\n                                                    borderRadius=\"lg\"\r\n                                                    value={1}\r\n                                                    hasStripe=\"true\"\r\n                                                    size=\"md\"\r\n                                                />\r\n                                            </Box>\r\n                                            <Box align=\"center\" mb={3}>\r\n                                                <GiEmerald w={20} h={20} color=\"#cd7f32\" size={50}></GiEmerald>\r\n                                            </Box>\r\n\r\n                                        </Box>\r\n                                        </Center>\r\n                                    </>\r\n                                )}\r\n                            </WrapItem>\r\n                        \r\n                    ))}\r\n            </Wrap>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","export function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    const request = window.indexedDB.open('mind-decks', 1);\r\n\r\n    let db, tx, store;\r\n\r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n\r\n      db.createObjectStore('decks', { keyPath: '_id' });\r\n      db.createObjectStore('game-matrix', { keyPath: '_id' });\r\n    };\r\n\r\n    request.onerror = function(e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n    request.onsuccess = function(e) {\r\n      db = request.result;\r\n      tx = db.transaction(storeName, 'readwrite');\r\n      store = tx.objectStore(storeName);\r\n\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n      switch (method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n      }\r\n\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n}","class GameSession {\r\n    constructor(deck, matrix) {\r\n        this.finished = false;\r\n        this.matrix = matrix;  // retrieved from DB or IndexedDb\r\n        this.deck = deck;\r\n        this.progress = 0; // for displaying progress on problem set - i.e. 6/10\r\n        this.cardsInSet = [];\r\n        this.problemSet = [];\r\n        this.correctCards = [];\r\n        this.incorrectCards = [];\r\n        this.currentQuestion = {};\r\n        this.gameMode = 1; // get from react useState in Game component\r\n    }\r\n\r\n    // randomly reorder an array\r\n    shuffleArray(array) { \r\n        array.sort((a, b) => Math.random() - 0.5)\r\n        return array;\r\n    }\r\n\r\n    // get number of 'strong' or answered correctly cards and total number of cards in the game matrix\r\n    getTotal() {\r\n        let gameOver = false;\r\n        // total number of cards in arrays indexes [3] & [4]\r\n        let strongCards = 0;\r\n        // total all cards in the matrix \r\n        let total = 0;\r\n        // number of cards in the deck - use to determine progress in a deck\r\n        const deckTotal = this.deck.length;\r\n        for (let i=0; i<5; i++) {\r\n            if (i > 2) {\r\n                strongCards += this.matrix[i].length;\r\n            }\r\n            total += this.matrix[i].length;\r\n        }\r\n        // check to see if user completed the deck\r\n        if (strongCards === deckTotal){\r\n            gameOver = true;\r\n        }\r\n        return { strong: strongCards, total: total, deckTotal: deckTotal, gameOver: gameOver};\r\n    }\r\n\r\n    // pushes cards to matrix on first run and when 70% of current cards are in matrix[3] or matrix[4]\r\n    addNewCards(index) { // set index to 0 for first run, use total cards in matrix to determine index for each addition afterwards\r\n        let slicedCards;\r\n        let num = this.deck.length - index + 1;\r\n        if (this.deck.length - index + 1 < 15 ) {\r\n            slicedCards = this.deck.slice(index, index+num);\r\n        } else {\r\n            slicedCards = this.deck.slice(index, index+15);\r\n        }\r\n        // slice n cards from deck array, push to matrix[2]\r\n        slicedCards.forEach(card => this.matrix[2].push(card.cardId));\r\n    }\r\n\r\n    // if this is not the first game, determine if cards need to be added based on 'score'\r\n    addCardsByScore() { \r\n        const score = this.getTotal();\r\n        if (score.strong/score.total >= 0.7) {\r\n            this.addNewCards(score.total);\r\n        }\r\n    }\r\n\r\n    // select cards based on a weighted random number generator\r\n    randomSelect() { \r\n        this.cardsInSet = [];\r\n        let newCard;\r\n        // percentage break points for each matrix array\r\n        let bins = [0, 39, 69, 84, 94];\r\n        // number of times a card has been selected from each matrix array\r\n        let binRollCount = [0,0,0,0,0];\r\n        // create a tracker for how many cards are in each matrix array.\r\n        let binStartLength = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            binStartLength.push(this.matrix[i].length)\r\n        }\r\n        // console.log(binStartLength);\r\n\r\n\r\n        // checks to see if number of selections from this array is >= the number of cards in this array\r\n        // if true, change the percentage for this array to = 101 (cannot be chosen again)\r\n        const checkRollCount = (i) => {\r\n            if (binRollCount[i] >= binStartLength[i]) {\r\n                bins[i] = 101;\r\n            }\r\n        }\r\n\r\n\r\n        for (let j=0; j<=9; j++) {\r\n            \r\n            // checks to see if number of selections from this array is >= the number of cards in this array\r\n            // if true, change the percentage for this array to = 101 (cannot be chosen again)\r\n            for (let i=0; i<this.matrix.length; i++) {\r\n                checkRollCount(i);\r\n            };\r\n            console.log('New Bins: ', bins);\r\n\r\n            // creates a random \"roll\" from 0-99\r\n            const roll = Math.floor(Math.random() * 100);\r\n\r\n            let index; // references corresponding matrix array, bins, binRollCount & binStartLength by index\r\n            if (roll > bins[4]) {\r\n                index = 4;\r\n            } else if (roll > bins[3]) {\r\n                index = 3;\r\n            } else if (roll > bins[2]) {\r\n                index = 2;\r\n            } else if (roll > bins[1]) {\r\n                index = 1; \r\n            } else if (bins[0] === 101){\r\n                if (binRollCount[1] < binStartLength[1]) {\r\n                    index = 1;\r\n                } else if (binRollCount[2] < binStartLength[2]){\r\n                    index = 2;\r\n                } else if (binRollCount[3] < binStartLength[3]){\r\n                    index = 3;\r\n                } else {\r\n                    index = 4;\r\n                }\r\n            } else {\r\n                index = 0;\r\n            }\r\n            console.log(`Roll: ${roll} Percentages: ${bins} Index: ${index}`);\r\n            // increase the \"roll count\" for this bin\r\n            binRollCount[index]++;\r\n            \r\n            newCard = this.matrix[index].find((card) => {\r\n                return this.cardsInSet.indexOf(card) === -1\r\n            });\r\n            this.cardsInSet.push(newCard);\r\n            console.log('CardsInSet: ', this.cardsInSet);\r\n        }\r\n    }\r\n\r\n    // get cards from matrix to fill this.cardsInSet array\r\n    selectCards() {\r\n        this.cardsInSet = [];\r\n        // shuffle all arrays\r\n        for (let i=0; i<5; i++) {\r\n            this.shuffleArray(this.matrix[i]);\r\n        }\r\n        // select random cards to fill this.cardsInSet\r\n        this.randomSelect();\r\n    }\r\n\r\n    // get all data for a card from the deck given its cardId\r\n    getCardData(cardId) { \r\n        var result = this.deck.filter(card => {\r\n            return card.cardId === cardId;\r\n        });\r\n        return result[0];\r\n    }\r\n\r\n     // create problem options from 2 random cards in set\r\n    generateOptions(cardId, side) {\r\n        let choices = this.cardsInSet.slice();\r\n        let results = [];\r\n        choices.splice(choices.indexOf(cardId), 1);\r\n        for (let i=0; i<2; i++) {\r\n            const random = Math.floor(Math.random()*choices.length); // we don't add +1 because we are indexing from\r\n            const optionCard = this.getCardData(choices[random]);\r\n            if (side === 'back') {\r\n                results[i] = optionCard.back;\r\n            } else if (side === 'front') {\r\n                results[i] = optionCard.front;\r\n            }\r\n            choices.splice(random, 1);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    useSide(card, bool) {\r\n        let problem = {question: '', options: [], answer: ''}\r\n        if (bool === true) {\r\n            problem.question = card.front;\r\n            let options = this.generateOptions(card.cardId, 'back');\r\n            options.push(card.back);\r\n            problem.options = this.shuffleArray(options);\r\n            problem.answer = card.back;\r\n        } else {\r\n            problem.question = card.back;\r\n            let options = this.generateOptions(card.cardId, 'front');\r\n            options.push(card.front);\r\n            problem.options = this.shuffleArray(options);\r\n            problem.answer = card.front;\r\n        }\r\n        return problem;\r\n    }\r\n    // create each \"problem\" as an object, then push to problemSet array.\r\n    createProblemSet() {\r\n        for (let i = 0; i < 10; i++) { \r\n            let problem;\r\n            const card = this.getCardData(this.cardsInSet[i]);\r\n            // check for game mode and customize questions/answers\r\n            if (this.gameMode === 1) {\r\n                problem = this.useSide(card, true);\r\n            } else if (this.gameMode === 2) {\r\n                problem = this.useSide(card, false);\r\n            } else {\r\n                let side = Math.floor(Math.random() * 2);\r\n                if (side === 1) {\r\n                    side = true;\r\n                } else {\r\n                    side = false;\r\n                }\r\n                problem = this.useSide(card, side);\r\n            }\r\n            this.problemSet.push(problem);\r\n        }\r\n    }\r\n\r\n    // main game flow (up to creation of the problem set)\r\n    start() {\r\n        this.reset();\r\n        // are there cards?\r\n        const hasCards = this.getTotal(); \r\n        // if no, then this is the first run, add 15 cards, shuffle and add to set\r\n        if (hasCards.total === 0) { \r\n            this.addNewCards(0);\r\n            this.cardsInSet = this.shuffleArray(this.matrix[2]).slice(0,15);\r\n        // if yes, check current card status and add cards if necessary, then randomly add to set\r\n        } else if ((hasCards.total > 0)) { \r\n            this.addCardsByScore(); \r\n            this.selectCards();\r\n        }\r\n        this.createProblemSet();\r\n        \r\n    }\r\n\r\n    // renders next problem (combines with React Components)\r\n    renderNext() {\r\n\r\n        if (this.finished) {\r\n            return this.tallyResults();\r\n        }\r\n        const problem = this.problemSet[this.progress];\r\n        console.log(this.progress)\r\n        if (this.progress === 9)  {\r\n            this.finished = true;\r\n            //this.renderNext()\r\n            //this.tallyResults();\r\n        }\r\n        this.progress++;\r\n        return problem;\r\n    }\r\n\r\n    // checks the answer returns a boolean used to move card up or down one array in the matrix\r\n    isCorrect(bool) {\r\n        if (bool === true) {\r\n            this.correctCards.push(this.cardsInSet.shift());\r\n            return('correct');\r\n\r\n        } else {\r\n            this.incorrectCards.push(this.cardsInSet.shift());\r\n            return('incorrect');\r\n        }\r\n    }\r\n\r\n    // determine final results of set\r\n    tallyResults() { \r\n        const results = { correct: this.correctCards.length, incorrect: this.incorrectCards.length};\r\n        this.resortMatrix(this.correctCards, true);\r\n        this.resortMatrix(this.incorrectCards, false);\r\n        this.correctCards = [];\r\n        this.incorrectCards = [];\r\n        return results;\r\n    }\r\n\r\n    reset() {\r\n        this.finished = false;\r\n        this.progress = 0; // for displaying progress on problem set - i.e. 6/10\r\n        this.cardsInSet = [];\r\n        this.problemSet = [];\r\n        this.correctCards = [];\r\n        this.incorrectCards = [];\r\n        this.currentQuestion = {};\r\n    }\r\n\r\n    // takes either this.correctCards with bool=true, or this.incorrectCards with bool=false\r\n    resortMatrix(arr, bool) {\r\n        arr.forEach(cardId => {\r\n            let cardIndex;\r\n            // iterates through arrays in this.matrix\r\n            for(let i=0; i<5; i++){\r\n                // looks for index of the cardId in each array\r\n                cardIndex = this.matrix[i].indexOf(cardId);\r\n                // if it finds it in the array, the card was correct and it is not in array 4\r\n                if (cardIndex !== -1 && bool === true && i<4) {\r\n                    // slice from current spot\r\n                    const card = this.matrix[i].splice(cardIndex, 1);\r\n                    //move to next highest array\r\n                    this.matrix[i+1].push(card[0]);\r\n                    break;\r\n                // if it finds it in the array, the card was incorrect and it is not in array 0\r\n                } else if (cardIndex !== -1 && bool === false && i>0) {\r\n                    const card = this.matrix[i].splice(cardIndex, 1);\r\n                    //move to next lowest array\r\n                    this.matrix[i-1].push(card[0]);\r\n                    break;\r\n                } else {\r\n                    continue\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default GameSession;","import React, { useState, useRef, useEffect } from 'react';\r\nimport GameSession from '../../utils/gameLogic';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { GET_DECKS, GET_DECK_ID, GET_GAME_BY_DECK_NAME } from \"../../utils/queries\";\r\nimport { ADD_GAME, UPDATE_GAME } from '../../utils/mutations';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n    MdBuild,\r\n    MdCall\r\n } from \"react-icons/md\"\r\nimport {\r\n    Box,\r\n    Flex,\r\n    Spacer,\r\n    Avatar,\r\n    Wrap,\r\n    WrapItem,\r\n    Center,\r\n    SimpleGrid,\r\n    Stack,\r\n    Button,\r\n    useToast,\r\n    toast,\r\n    useDisclosure\r\n} from '@chakra-ui/react';\r\nimport Flippy, { FrontSide, BackSide } from 'react-flippy'\r\n// Chakra Modal\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n} from \"@chakra-ui/react\"\r\nfunction Game() {\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n    const [question, setQuestion] = useState('Press Start Game to play');\r\n    //Answer for Back of Card, not sure why but answer checking if statement won't read this variable properly to check answer always displays as incorrect\r\n    const [cardAnswer, setCardAnswer] = useState(''); \r\n    const [options, setOptions] = useState([]);\r\n    const [methods, setMethods] = useState({});\r\n    const [gameMode, setGameMode] = useState(1);\r\n    // Modal Declaration\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    // Modal useState\r\n    const [numCorrectAnswer, SetNumCorrectAnswer] = useState(0); \r\n    const ref = useRef();\r\n    let answer; // for answer checking\r\n    // Allow toast to work\r\n    const toast = useToast()\r\n    // this will display the URL ID value from the URL\r\n    //const { id: deckId } = useParams();\r\n    const { id } = useParams();\r\n    //console.log(thoughtId);\r\n    let matrix;\r\n    const { loading, data } = useQuery(GET_DECK_ID, {\r\n      // this is from the react router dom useParams id URL\r\n      //variables: { id: deckId }\r\n      variables: { id }\r\n    });\r\n    //const getGameStatus = useQuery(GET_GAME_BY_DECK_NAME, {\r\n    const {loading: loadingGame, data: gameData }  = useQuery(GET_GAME_BY_DECK_NAME, {\r\n      skip: !data,\r\n      variables: { deck: data && data.deck.deckname },\r\n    });\r\n    const [addGame] = useMutation(ADD_GAME);\r\n    const [updateGame] = useMutation(UPDATE_GAME);\r\n    if (loadingGame || loading) {\r\n      return <h1>Loading...</h1>\r\n    } else {\r\n      console.log(gameData);\r\n      matrix = gameData.getGame.matrix;\r\n      // if (!gameData.getGame) {\r\n      //   matrix = [[], [], [], [], []];\r\n      //   console.log('inside')\r\n      //   try {\r\n      //     // execute addUser mutation and pass in variable data from form\r\n      //     const addGameData = addGame({\r\n      //       variables: { deck: data.deck.deckname }\r\n      //     });\r\n      //     console.log(addGameData);\r\n      //   } catch (e) {\r\n      //     console.error(e);\r\n      //   }\r\n      // } else {\r\n      //   matrix = gameData.getGame.matrix;\r\n      // };\r\n    }\r\n    function handleStart() {\r\n      setGameStarted(true);\r\n      // const Game = new GameSession(data.deck.cards, [[], [], [], [], []]); // matrix retrieved from DB\r\n      console.log(matrix);\r\n      const Game = new GameSession(data.deck.cards, matrix); // matrix retrieved from DB\r\n      Game.gameMode = gameMode;\r\n      Game.start();\r\n      let currentQuestion;\r\n      currentQuestion = Game.renderNext();\r\n      console.log(currentQuestion);\r\n      setQuestion(currentQuestion.question);\r\n      setOptions(currentQuestion.options);\r\n      setCardAnswer(currentQuestion.answer); //put answer on back of card\r\n      answer = currentQuestion.answer; //load correct answer for if statement below\r\n      let matrixState = [];\r\n      // Modal Result Set\r\n      let tallyResults = {}\r\n      return {\r\n        handleInput(e) {\r\n          e.preventDefault();\r\n          const userInput = e.target.textContent;\r\n          const isCorrect = answer === userInput;\r\n          ref.current.toggle()\r\n          Game.isCorrect(isCorrect);\r\n          toast({\r\n            title: `${isCorrect ? 'Correct' : 'Incorrect'}`,\r\n            description: `${isCorrect ? 'Correct answer provided' : 'Question will show up again!'}`,\r\n            status: `${isCorrect ? 'success' : 'error'}`,\r\n            duration: 1200,\r\n            isClosable: true,\r\n            position: 'top'\r\n          })\r\n          if (!Game.finished) {\r\n            currentQuestion = Game.renderNext();\r\n            setQuestion(currentQuestion.question);\r\n            setOptions(currentQuestion.options);\r\n            answer = currentQuestion.answer;\r\n            setTimeout(() => {\r\n              setCardAnswer(answer); \r\n            }, 800); \r\n            ; //put answer on back of card\r\n          } else { // at this point the  matrix has been sorted.\r\n            //const tallyResults = Game.tallyResults()\r\n            let tallyAnswer = (Game.tallyResults())\r\n            SetNumCorrectAnswer(tallyAnswer.correct)\r\n            // UpdateGameData logic\r\n            matrixState = Game.matrix;\r\n            console.log(matrixState);\r\n            const total = Game.getTotal();\r\n            let score = total.strong;\r\n            try {\r\n              // execute addUser mutation and pass in variable data from form\r\n              const updateGameData = updateGame({\r\n                variables: { deck: data.deck.deckname, score, matrix: matrixState }\r\n              });\r\n              console.log(typeof updateGameData);\r\n            } catch (e) {\r\n              console.error(e);\r\n            }\r\n            onOpen(true)\r\n            //window.location.replace('/profile');\r\n            Game.start();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <Box>\r\n      {/*Once you select the mode, a button to start will appear*/}\r\n      {!gameStarted && <Wrap  direction=\"row\"  justify=\"space-evenly\" align=\"center\">\r\n        <WrapItem p={2}>\r\n          <Button \r\n          boxShadow=\"2xl\" \r\n          leftIcon={<MdBuild />}\r\n            _hover={{bg:\"pink\"}} \r\n            size= \"lg\" \r\n            onClick={() => {\r\n              setGameMode(1);\r\n              toast({\r\n                title: \"Activated!\",\r\n                description: \"Card Front Mode Activated!\",\r\n                status: \"info\",\r\n                duration: 2800,\r\n                isClosable: true,\r\n                position: \"top\"\r\n                });\r\n              }\r\n            }\r\n            >\r\n            Card Front Mode\r\n          </Button>\r\n        </WrapItem>\r\n        <WrapItem p={2}>\r\n          <Button \r\n          boxShadow=\"2xl\" \r\n          leftIcon={<MdBuild />} \r\n          _hover={{bg:\"pink\"}} \r\n          size = \"lg\"\r\n          onClick={() => {\r\n            setGameMode(2);\r\n            toast({\r\n              title: \"Activated!\",\r\n              description: \"Card Back Mode Activated!\",\r\n              status: \"info\",\r\n              duration: 2800,\r\n              isClosable: true,\r\n              position: \"top\"\r\n              });\r\n            }\r\n          }>\r\n            Card Back Mode\r\n          </Button>\r\n        </WrapItem>\r\n        <WrapItem p={2}>\r\n          <Button \r\n          boxShadow=\"2xl\" \r\n          leftIcon={<MdBuild />}\r\n          _hover={{bg:\"pink\"}} \r\n          size = \"lg\"\r\n          onClick={() => {\r\n            setGameMode(3);\r\n            toast({\r\n              title: \"Activated!\",\r\n              description: \"Mix Mode Activated!\",\r\n              status: \"info\",\r\n              duration: 2800,\r\n              isClosable: true,\r\n              position: \"top\"\r\n              });\r\n            }\r\n          }>\r\n            Mix Mode\r\n          </Button>\r\n        </WrapItem>\r\n      </Wrap>}\r\n      {!gameStarted && <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n           <Button \r\n           m={4} \r\n           boxShadow=\"2xl\"\r\n           onClick={() =>{\r\n            setMethods(handleStart()); \r\n          }\r\n          }\r\n          >\r\n            Start Game\r\n          </Button>\r\n      </Box>}\r\n        <Box>\r\n        <Wrap  direction=\"column\"  justify=\"space-between\" align=\"center\">\r\n        <Flippy\r\n        flipOnHover={false}\r\n        flipOnClick={false}\r\n        ref={ref}>        \r\n        <FrontSide\r\n        style={{ backgroundColor: \"#FEB2B2\", borderRadius: \"0.5rem\", boxShadow: \"5px 10px 10px 5px grey\"}}>\r\n            <WrapItem \r\n            //boxShadow=\"2xl\"\r\n            bg=\"red.200\"\r\n            maxW=\"sm\"\r\n            borderRadius=\"lg\" \r\n            overflow=\"hidden\">\r\n              <Center w=\"350px\" h=\"400px\">                  \r\n                {question}                \r\n              </Center>              \r\n            </WrapItem>\r\n            </FrontSide>\r\n            <BackSide\r\n            animationDuration={600}\r\n            style={{ backgroundColor: \"#FEB2B2\", borderRadius: \"0.5rem\", boxShadow: \"5px 10px 10px 5px grey\"}}>\r\n            <WrapItem \r\n            //boxShadow=\"2xl\"\r\n            bg=\"red.200\"\r\n            maxW=\"sm\"\r\n            borderRadius=\"lg\" \r\n            overflow=\"hidden\">\r\n              <Center w=\"350px\" h=\"400px\">\r\n                {cardAnswer}            \r\n              </Center>            \r\n            </WrapItem>\r\n            </BackSide>          \r\n        </Flippy>\r\n        </Wrap>\r\n        <Wrap  direction=\"row\"  justify=\"space-evenly\" align=\"center\" mt={5}>\r\n          {options.map(option => (\r\n            <WrapItem key={option} p={2}>\r\n              <Button \r\n              boxShadow=\"2xl\"  \r\n              onClick={e => {\r\n                ref.current.toggle();\r\n                setTimeout(() => {\r\n                  methods.handleInput(e); \r\n                }, 800)                 \r\n              }}\r\n              >\r\n                {option}\r\n              </Button>\r\n            </WrapItem>\r\n          ))}\r\n        </Wrap>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>{data.deck.deckname}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n          You have answered {numCorrectAnswer} correctly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      </Box>\r\n    </Box>\r\n    )\r\n  }\r\n  export default Game;\r\n","import React, { useDebugValue } from 'react';\r\nimport { GET_DECKS, GET_USERS } from \"../../utils/queries\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  Text,\r\n  VStack,\r\n  Code,\r\n  Grid,\r\n  GridItem,\r\n  theme,\r\n  Flex,\r\n  Spacer, \r\n  Avatar,\r\n  Wrap, \r\n  WrapItem,\r\n  Center,\r\n  Image,\r\n  Badge,\r\n  Progress,\r\n  SimpleGrid,\r\n  Button,\r\n  useToast,\r\n  Select\r\n} from '@chakra-ui/react';\r\nimport {\r\n    Table,\r\n    Thead,\r\n    Tbody,\r\n    Tfoot,\r\n    Tr,\r\n    Th,\r\n    Td,\r\n    TableCaption,\r\n  } from \"@chakra-ui/react\"\r\nimport {\r\n    MdBuild,\r\n    MdCall\r\n} from \"react-icons/md\"\r\nimport { \r\n    GiEmerald,\r\n    GiGoldBar\r\n   } from \"react-icons/gi\";\r\nimport Auth from '../../utils/auth';\r\nimport periodicTable from '../../assets/images/periodic-table.svg'\r\n  \r\n\r\nfunction Leaderboard() {\r\n     const testImage = {\r\n         name: 'Periodic Table of Elements',\r\n         cards: 118,\r\n        img: 'https://bit.ly/2Z4KKcF'\r\n     } \r\n\r\n     const deck = [\r\n    \r\n        {\r\n        name: 'Periodic Table of Elements',\r\n        cards: 118,\r\n        img: 'https://bit.ly/2Z4KKcF'\r\n        },\r\n        {\r\n          name: 'Flags of the world',\r\n          cards: 195,\r\n          img: 'https://bit.ly/2Z4KKcF'\r\n          },\r\n    \r\n      ]\r\n\r\n    const toast = useToast()\r\n\r\n    // get all decks into data\r\n    const { loading, error, data } = useQuery(GET_DECKS);\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <h1> Loading </h1>\r\n    } else {\r\n        console.log(data)\r\n    }\r\n\r\n    /*\r\n                    \r\n                    <Box>\r\n                        <Image src={testImage.img} alt='placeholder' />\r\n                        <Box>\r\n                            {data.decks.deckname}\r\n                        </Box>\r\n                        <Box>\r\n                        {data.decks.cards.length} cards\r\n                        </Box>\r\n                    </Box>*/\r\n\r\n   \r\n\r\n    return (\r\n\r\n<Box>\r\n\r\n\r\n    <Box textAlign=\"center\" fontSize=\"xl\" mb={6} >\r\n        Welcome to the leaderboard!\r\n    </Box>    \r\n\r\n    <Center mb={5}>\r\n    <Select boxShadow=\"2xl\" width=\"300px\" placeholder=\"Select Deck to Filter\">\r\n        <option value=\"option1\">Periodic Table</option>\r\n        <option value=\"option2\">Flags of the World</option>\r\n    </Select>\r\n    <Link to={`/leaderboard`}>\r\n    <Button ml={3}\r\n          boxShadow=\"2xl\" \r\n            _hover={{bg:\"pink\"}} \r\n            size= \"lg\" \r\n            >\r\n              \r\n            Show all Decks!\r\n          </Button>\r\n       </Link>\r\n    </Center>\r\n\r\n    <Box >\r\n\r\n    <Table variant=\"striped\" colorScheme=\"teal\">\r\n        <TableCaption>Mind Deck Leaderboard</TableCaption>\r\n        <Thead>\r\n            <Tr>\r\n            <Th>User Name</Th>\r\n            <Th>Deck</Th>\r\n            <Th>Cards Completed</Th>\r\n            </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n            <Tr>\r\n            <Td>esroleo</Td>\r\n            <Td>Periodic Table</Td>\r\n            <Td>50</Td>\r\n            </Tr>\r\n            <Tr>\r\n            <Td>anagha</Td>\r\n            <Td>Periodic Table</Td>\r\n            <Td>100</Td>\r\n            </Tr>\r\n            <Tr>\r\n            <Td>ali</Td>\r\n            <Td>Periodic Table</Td>\r\n            <Td>20</Td>\r\n            </Tr>\r\n            <Tr>\r\n            <Td>shawn</Td>\r\n            <Td>Flags of the World</Td>\r\n            <Td>15</Td>\r\n            </Tr>\r\n            <Tr>\r\n            <Td>terrance</Td>\r\n            <Td>Flags of the World</Td>\r\n            <Td>30</Td>\r\n            </Tr>\r\n            <Tr>\r\n            <Td>kris</Td>\r\n            <Td>Flags of the World</Td>\r\n            <Td>90</Td>\r\n            </Tr>\r\n        </Tbody>\r\n        <Tfoot>\r\n            <Tr>\r\n            <Th>User Name</Th>\r\n            <Th>Deck</Th>\r\n            <Th>Cards Completed</Th>\r\n            </Tr>\r\n        </Tfoot>\r\n        </Table>\r\n\r\n    </Box>\r\n\r\n\r\n  \r\n\r\n  \r\n    \r\n\r\n        \r\n         \r\n      </Box>\r\n    )\r\n  }\r\n  \r\n  export default Leaderboard;\r\n","import React, { useState } from 'react';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  Text,\r\n  Link,\r\n  VStack,\r\n  Code,\r\n  Grid,\r\n  theme,\r\n  Flex,\r\n  Spacer, \r\n  Avatar,\r\n  Wrap, \r\n  WrapItem,\r\n  Center\r\n} from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\r\nimport { Logo } from './Logo';\r\nimport Nav from './components/Nav';\r\nimport Profile from './components/Profile';\r\nimport Home from './components/Home';\r\nimport Game from './components/Game';\r\n// End of imports //\r\nimport Leaderboard from './components/Leaderboard';\r\n\r\n\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem('id_token')\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : ''\r\n      }\r\n    })\r\n  },\r\n  uri: '/graphql',\r\n})\r\n\r\nfunction App() {\r\n\r\n  const [navLinkSelected, setNavLinkSelected] = useState('Home');\r\n\r\n  //navLinkSelected={navLinkSelected} setNavLinkSelected={setNavLinkSelected}\r\n\r\n  const renderPage = () => {\r\n\r\n\r\n\r\n    switch (navLinkSelected) {\r\n      case 'Profile':\r\n        return <Profile />;\r\n      case 'Home':\r\n       return <Home>\r\n       </Home>\r\n      case 'Game':\r\n        return <Game />;\r\n      default:\r\n        return <Home />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n    <Router>\r\n      <ChakraProvider theme={theme}>\r\n        <Box textAlign=\"center\" fontSize=\"xl\" >\r\n          {/*Start of Header - move to header component*/}\r\n          <ColorModeSwitcher justifySelf=\"flex-end\" m={5} />\r\n          <Nav navLinkSelected={navLinkSelected} setNavLinkSelected={setNavLinkSelected}>\r\n          </Nav>     \r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/profile\" component={Profile} />\r\n            <Route exact path=\"/game/:id\" component={Game} />\r\n            <Route exact path=\"/leaderboard\" component={Leaderboard} />\r\n\r\n          </Switch>\r\n          {/*End of Header*/}\r\n\r\n          <main>\r\n              {/* Call the renderPage function passing in the currentPage */}\r\n              {/*<div>{renderPage(navLinkSelected)}</div> */}\r\n          </main>\r\n\r\n        \r\n        </Box>\r\n      </ChakraProvider>\r\n    </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\n/* column flex default sample\r\n          <VStack spacing={8}>\r\n            <Logo h=\"40vmin\" pointerEvents=\"none\" />\r\n            <Text>\r\n              Edit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\r\n            </Text>\r\n            <Link\r\n              color=\"teal.500\"\r\n              href=\"https://chakra-ui.com\"\r\n              fontSize=\"2xl\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Learn Chakra\r\n            </Link>\r\n          </VStack>\r\n\r\n*/\r\n\r\n/* example of grid\r\n\r\n        <Grid minH=\"100vh\" p={3}>\r\n\r\n         \r\n\r\n        </Grid>\r\n\r\n*/\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ColorModeScript } from '@chakra-ui/react';\r\nimport React, { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n","module.exports = __webpack_public_path__ + \"static/media/svg1.2a4635af.svg\";","module.exports = __webpack_public_path__ + \"static/media/svg2.b2ee8ce9.svg\";"],"sourceRoot":""}